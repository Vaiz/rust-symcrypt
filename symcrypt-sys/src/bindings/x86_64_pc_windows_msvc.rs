/* automatically generated by rust-bindgen 0.71.1 */

pub const SYMCRYPT_CODE_VERSION_API: u32 = 103;
pub const SYMCRYPT_CODE_VERSION_MINOR: u32 = 4;
pub const SYMCRYPT_CODE_VERSION_PATCH: u32 = 2;
pub const SYMCRYPT_MD5_RESULT_SIZE: u32 = 16;
pub const SYMCRYPT_SHA1_RESULT_SIZE: u32 = 20;
pub const SYMCRYPT_SHA256_RESULT_SIZE: u32 = 32;
pub const SYMCRYPT_SHA384_RESULT_SIZE: u32 = 48;
pub const SYMCRYPT_SHA512_RESULT_SIZE: u32 = 64;
pub const SYMCRYPT_SHA3_256_RESULT_SIZE: u32 = 32;
pub const SYMCRYPT_SHA3_384_RESULT_SIZE: u32 = 48;
pub const SYMCRYPT_SHA3_512_RESULT_SIZE: u32 = 64;
pub const SYMCRYPT_AES_BLOCK_SIZE: u32 = 16;
pub const SYMCRYPT_FLAG_ECKEY_ECDSA: u32 = 4096;
pub const SYMCRYPT_FLAG_ECKEY_ECDH: u32 = 8192;
pub const SYMCRYPT_FLAG_RSAKEY_SIGN: u32 = 4096;
pub const SYMCRYPT_FLAG_RSAKEY_ENCRYPT: u32 = 8192;
pub const SYMCRYPT_FLAG_RSA_PKCS1_NO_ASN1: u32 = 1;
pub const SYMCRYPT_FLAG_RSA_PKCS1_OPTIONAL_HASH_OID: u32 = 2;
pub const SYMCRYPT_ERROR_SYMCRYPT_NO_ERROR: SYMCRYPT_ERROR = 0;
pub const SYMCRYPT_ERROR_SYMCRYPT_UNUSED: SYMCRYPT_ERROR = 32768;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_KEY_SIZE: SYMCRYPT_ERROR = 32769;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_BLOCK_SIZE: SYMCRYPT_ERROR = 32770;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_DATA_SIZE: SYMCRYPT_ERROR = 32771;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_NONCE_SIZE: SYMCRYPT_ERROR = 32772;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_TAG_SIZE: SYMCRYPT_ERROR = 32773;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_ITERATION_COUNT: SYMCRYPT_ERROR = 32774;
pub const SYMCRYPT_ERROR_SYMCRYPT_AUTHENTICATION_FAILURE: SYMCRYPT_ERROR = 32775;
pub const SYMCRYPT_ERROR_SYMCRYPT_EXTERNAL_FAILURE: SYMCRYPT_ERROR = 32776;
pub const SYMCRYPT_ERROR_SYMCRYPT_FIPS_FAILURE: SYMCRYPT_ERROR = 32777;
pub const SYMCRYPT_ERROR_SYMCRYPT_HARDWARE_FAILURE: SYMCRYPT_ERROR = 32778;
pub const SYMCRYPT_ERROR_SYMCRYPT_NOT_IMPLEMENTED: SYMCRYPT_ERROR = 32779;
pub const SYMCRYPT_ERROR_SYMCRYPT_INVALID_BLOB: SYMCRYPT_ERROR = 32780;
pub const SYMCRYPT_ERROR_SYMCRYPT_BUFFER_TOO_SMALL: SYMCRYPT_ERROR = 32781;
pub const SYMCRYPT_ERROR_SYMCRYPT_INVALID_ARGUMENT: SYMCRYPT_ERROR = 32782;
pub const SYMCRYPT_ERROR_SYMCRYPT_MEMORY_ALLOCATION_FAILURE: SYMCRYPT_ERROR = 32783;
pub const SYMCRYPT_ERROR_SYMCRYPT_SIGNATURE_VERIFICATION_FAILURE: SYMCRYPT_ERROR = 32784;
pub const SYMCRYPT_ERROR_SYMCRYPT_INCOMPATIBLE_FORMAT: SYMCRYPT_ERROR = 32785;
pub const SYMCRYPT_ERROR_SYMCRYPT_VALUE_TOO_LARGE: SYMCRYPT_ERROR = 32786;
pub const SYMCRYPT_ERROR_SYMCRYPT_SESSION_REPLAY_FAILURE: SYMCRYPT_ERROR = 32787;
pub type SYMCRYPT_ERROR = ::std::os::raw::c_int;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_NULL: _SYMCRYPT_ECURVE_TYPE = 0;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_SHORT_WEIERSTRASS: _SYMCRYPT_ECURVE_TYPE = 1;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_TWISTED_EDWARDS: _SYMCRYPT_ECURVE_TYPE = 2;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_MONTGOMERY: _SYMCRYPT_ECURVE_TYPE = 3;
pub type _SYMCRYPT_ECURVE_TYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECURVE_TYPE as SYMCRYPT_ECURVE_TYPE;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type BYTE = ::std::os::raw::c_uchar;
pub type UINT32 = ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type SIZE_T = ULONG_PTR;
pub type PBYTE = *mut BYTE;
pub type PCBYTE = *const BYTE;
pub type PCUINT32 = *const UINT32;
pub type PUINT64 = *mut UINT64;
pub type PCUINT64 = *const UINT64;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type PCVOID = *const ::std::os::raw::c_void;
pub type BOOLEAN = BYTE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128i {
    pub m128i_i8: [::std::os::raw::c_char; 16usize],
    pub m128i_i16: [::std::os::raw::c_short; 8usize],
    pub m128i_i32: [::std::os::raw::c_int; 4usize],
    pub m128i_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128i_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128i_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128i_u32: [::std::os::raw::c_uint; 4usize],
    pub m128i_u64: [::std::os::raw::c_ulonglong; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128i"][::std::mem::size_of::<__m128i>() - 16usize];
    ["Alignment of __m128i"][::std::mem::align_of::<__m128i>() - 16usize];
    ["Offset of field: __m128i::m128i_i8"][::std::mem::offset_of!(__m128i, m128i_i8) - 0usize];
    ["Offset of field: __m128i::m128i_i16"][::std::mem::offset_of!(__m128i, m128i_i16) - 0usize];
    ["Offset of field: __m128i::m128i_i32"][::std::mem::offset_of!(__m128i, m128i_i32) - 0usize];
    ["Offset of field: __m128i::m128i_i64"][::std::mem::offset_of!(__m128i, m128i_i64) - 0usize];
    ["Offset of field: __m128i::m128i_u8"][::std::mem::offset_of!(__m128i, m128i_u8) - 0usize];
    ["Offset of field: __m128i::m128i_u16"][::std::mem::offset_of!(__m128i, m128i_u16) - 0usize];
    ["Offset of field: __m128i::m128i_u32"][::std::mem::offset_of!(__m128i, m128i_u32) - 0usize];
    ["Offset of field: __m128i::m128i_u64"][::std::mem::offset_of!(__m128i, m128i_u64) - 0usize];
};
impl Default for __m128i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_BLOCKCIPHER = _SYMCRYPT_BLOCKCIPHER;
pub type PCSYMCRYPT_BLOCKCIPHER = *const SYMCRYPT_BLOCKCIPHER;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MD5_CHAINING_STATE {
    pub H: [UINT32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD5_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_MD5_CHAINING_STATE>() - 16usize];
    ["Alignment of _SYMCRYPT_MD5_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_MD5_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_MD5_CHAINING_STATE = _SYMCRYPT_MD5_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MD5_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_MD5_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD5_STATE"][::std::mem::size_of::<_SYMCRYPT_MD5_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_MD5_STATE"][::std::mem::align_of::<_SYMCRYPT_MD5_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_MD5_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MD5_STATE = _SYMCRYPT_MD5_STATE;
pub type PSYMCRYPT_MD5_STATE = *mut _SYMCRYPT_MD5_STATE;
pub type PCSYMCRYPT_MD5_STATE = *const SYMCRYPT_MD5_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA1_CHAINING_STATE {
    pub H: [UINT32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA1_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA1_CHAINING_STATE>() - 32usize];
    ["Alignment of _SYMCRYPT_SHA1_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA1_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA1_CHAINING_STATE = _SYMCRYPT_SHA1_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA1_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_SHA1_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA1_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA1_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_SHA1_STATE"][::std::mem::align_of::<_SYMCRYPT_SHA1_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_SHA1_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA1_STATE = _SYMCRYPT_SHA1_STATE;
pub type PSYMCRYPT_SHA1_STATE = *mut _SYMCRYPT_SHA1_STATE;
pub type PCSYMCRYPT_SHA1_STATE = *const SYMCRYPT_SHA1_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA256_CHAINING_STATE {
    pub H: [UINT32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA256_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA256_CHAINING_STATE>() - 32usize];
    ["Alignment of _SYMCRYPT_SHA256_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA256_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA256_CHAINING_STATE = _SYMCRYPT_SHA256_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA256_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_SHA256_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA256_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA256_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_SHA256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_SHA256_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA256_STATE = _SYMCRYPT_SHA256_STATE;
pub type PSYMCRYPT_SHA256_STATE = *mut _SYMCRYPT_SHA256_STATE;
pub type PCSYMCRYPT_SHA256_STATE = *const SYMCRYPT_SHA256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA512_CHAINING_STATE {
    pub H: [UINT64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA512_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA512_CHAINING_STATE>() - 64usize];
    ["Alignment of _SYMCRYPT_SHA512_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA512_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA512_CHAINING_STATE = _SYMCRYPT_SHA512_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA512_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 128usize],
    pub chain: SYMCRYPT_SHA512_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA512_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA512_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_SHA512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, chain) - 160usize];
};
impl Default for _SYMCRYPT_SHA512_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA512_STATE = _SYMCRYPT_SHA512_STATE;
pub type PSYMCRYPT_SHA512_STATE = *mut _SYMCRYPT_SHA512_STATE;
pub type PCSYMCRYPT_SHA512_STATE = *const SYMCRYPT_SHA512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA384_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 128usize],
    pub chain: SYMCRYPT_SHA512_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA384_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA384_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_SHA384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, chain) - 160usize];
};
impl Default for _SYMCRYPT_SHA384_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA384_STATE = _SYMCRYPT_SHA384_STATE;
pub type PSYMCRYPT_SHA384_STATE = *mut _SYMCRYPT_SHA384_STATE;
pub type PCSYMCRYPT_SHA384_STATE = *const SYMCRYPT_SHA384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KECCAK_STATE {
    pub state: [UINT64; 25usize],
    pub inputBlockSize: UINT32,
    pub stateIndex: UINT32,
    pub paddingValue: UINT8,
    pub squeezeMode: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KECCAK_STATE"][::std::mem::size_of::<_SYMCRYPT_KECCAK_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_KECCAK_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_KECCAK_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::state"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, state) - 0usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::inputBlockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, inputBlockSize) - 200usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::stateIndex"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, stateIndex) - 204usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::paddingValue"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, paddingValue) - 208usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::squeezeMode"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, squeezeMode) - 209usize];
};
pub type SYMCRYPT_KECCAK_STATE = _SYMCRYPT_KECCAK_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_256_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_256_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_256_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_256_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_256_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_256_STATE = _SYMCRYPT_SHA3_256_STATE;
pub type PSYMCRYPT_SHA3_256_STATE = *mut _SYMCRYPT_SHA3_256_STATE;
pub type PCSYMCRYPT_SHA3_256_STATE = *const SYMCRYPT_SHA3_256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_384_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_384_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_384_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_384_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_384_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_384_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_384_STATE = _SYMCRYPT_SHA3_384_STATE;
pub type PSYMCRYPT_SHA3_384_STATE = *mut _SYMCRYPT_SHA3_384_STATE;
pub type PCSYMCRYPT_SHA3_384_STATE = *const SYMCRYPT_SHA3_384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_512_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_512_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_512_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_512_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_512_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_512_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_512_STATE = _SYMCRYPT_SHA3_512_STATE;
pub type PSYMCRYPT_SHA3_512_STATE = *mut _SYMCRYPT_SHA3_512_STATE;
pub type PCSYMCRYPT_SHA3_512_STATE = *const SYMCRYPT_SHA3_512_STATE;
pub type SYMCRYPT_HASH = _SYMCRYPT_HASH;
pub type PCSYMCRYPT_HASH = *const SYMCRYPT_HASH;
pub type PSYMCRYPT_HASH_INIT_FUNC = ::std::option::Option<unsafe extern "C" fn(pState: PVOID)>;
pub type PSYMCRYPT_HASH_APPEND_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbData: PCBYTE, cbData: SIZE_T)>;
pub type PSYMCRYPT_HASH_RESULT_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbResult: PVOID)>;
pub type PSYMCRYPT_HASH_APPEND_BLOCKS_FUNC = ::std::option::Option<
    unsafe extern "C" fn(pChain: PVOID, pbData: PCBYTE, cbData: SIZE_T, pcbRemaining: *mut SIZE_T),
>;
pub type PSYMCRYPT_HASH_STATE_COPY_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pStateSrc: PCVOID, pStateDst: PVOID)>;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HASH {
    pub initFunc: PSYMCRYPT_HASH_INIT_FUNC,
    pub appendFunc: PSYMCRYPT_HASH_APPEND_FUNC,
    pub resultFunc: PSYMCRYPT_HASH_RESULT_FUNC,
    pub appendBlockFunc: PSYMCRYPT_HASH_APPEND_BLOCKS_FUNC,
    pub stateCopyFunc: PSYMCRYPT_HASH_STATE_COPY_FUNC,
    pub stateSize: UINT32,
    pub resultSize: UINT32,
    pub inputBlockSize: UINT32,
    pub chainOffset: UINT32,
    pub chainSize: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HASH"][::std::mem::size_of::<_SYMCRYPT_HASH>() - 64usize];
    ["Alignment of _SYMCRYPT_HASH"][::std::mem::align_of::<_SYMCRYPT_HASH>() - 16usize];
    ["Offset of field: _SYMCRYPT_HASH::initFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, initFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH::appendFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, appendFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_HASH::resultFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, resultFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_HASH::appendBlockFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, appendBlockFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_HASH::stateCopyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, stateCopyFunc) - 32usize];
    ["Offset of field: _SYMCRYPT_HASH::stateSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, stateSize) - 40usize];
    ["Offset of field: _SYMCRYPT_HASH::resultSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, resultSize) - 44usize];
    ["Offset of field: _SYMCRYPT_HASH::inputBlockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, inputBlockSize) - 48usize];
    ["Offset of field: _SYMCRYPT_HASH::chainOffset"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, chainOffset) - 52usize];
    ["Offset of field: _SYMCRYPT_HASH::chainSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, chainSize) - 56usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_MD5_EXPANDED_KEY {
    pub innerState: SYMCRYPT_MD5_CHAINING_STATE,
    pub outerState: SYMCRYPT_MD5_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_MD5_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_MD5_EXPANDED_KEY>() - 48usize];
    ["Alignment of _SYMCRYPT_HMAC_MD5_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_MD5_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, outerState) - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, magic) - 32usize];
};
pub type SYMCRYPT_HMAC_MD5_EXPANDED_KEY = _SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_MD5_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY = *const SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_MD5_STATE {
    pub hash: SYMCRYPT_MD5_STATE,
    pub pKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_MD5_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_MD5_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_HMAC_MD5_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_MD5_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, pKey) - 112usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, magic) - 120usize];
};
impl Default for _SYMCRYPT_HMAC_MD5_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_MD5_STATE = _SYMCRYPT_HMAC_MD5_STATE;
pub type PSYMCRYPT_HMAC_MD5_STATE = *mut _SYMCRYPT_HMAC_MD5_STATE;
pub type PCSYMCRYPT_HMAC_MD5_STATE = *const SYMCRYPT_HMAC_MD5_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA1_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA1_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY>() - 80usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, outerState) - 32usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, magic) - 64usize];
};
pub type SYMCRYPT_HMAC_SHA1_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA1_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA1_STATE {
    pub hash: SYMCRYPT_SHA1_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA1_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA1_STATE>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA1_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA1_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, pKey) - 128usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, magic) - 136usize];
};
impl Default for _SYMCRYPT_HMAC_SHA1_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA1_STATE = _SYMCRYPT_HMAC_SHA1_STATE;
pub type PSYMCRYPT_HMAC_SHA1_STATE = *mut _SYMCRYPT_HMAC_SHA1_STATE;
pub type PCSYMCRYPT_HMAC_SHA1_STATE = *const SYMCRYPT_HMAC_SHA1_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA256_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA256_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY>() - 80usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, outerState) - 32usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, magic) - 64usize];
};
pub type SYMCRYPT_HMAC_SHA256_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA256_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA256_STATE {
    pub hash: SYMCRYPT_SHA256_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA256_STATE>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, pKey) - 128usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, magic) - 136usize];
};
impl Default for _SYMCRYPT_HMAC_SHA256_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA256_STATE = _SYMCRYPT_HMAC_SHA256_STATE;
pub type PSYMCRYPT_HMAC_SHA256_STATE = *mut _SYMCRYPT_HMAC_SHA256_STATE;
pub type PCSYMCRYPT_HMAC_SHA256_STATE = *const SYMCRYPT_HMAC_SHA256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, outerState) - 64usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, magic) - 128usize];
};
pub type SYMCRYPT_HMAC_SHA384_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA384_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA384_STATE {
    pub hash: SYMCRYPT_SHA384_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA384_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA384_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, pKey) - 224usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, magic) - 232usize];
};
impl Default for _SYMCRYPT_HMAC_SHA384_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA384_STATE = _SYMCRYPT_HMAC_SHA384_STATE;
pub type PSYMCRYPT_HMAC_SHA384_STATE = *mut _SYMCRYPT_HMAC_SHA384_STATE;
pub type PCSYMCRYPT_HMAC_SHA384_STATE = *const SYMCRYPT_HMAC_SHA384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, outerState) - 64usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, magic) - 128usize];
};
pub type SYMCRYPT_HMAC_SHA512_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA512_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA512_STATE {
    pub hash: SYMCRYPT_SHA512_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA512_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA512_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, pKey) - 224usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, magic) - 232usize];
};
impl Default for _SYMCRYPT_HMAC_SHA512_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA512_STATE = _SYMCRYPT_HMAC_SHA512_STATE;
pub type PSYMCRYPT_HMAC_SHA512_STATE = *mut _SYMCRYPT_HMAC_SHA512_STATE;
pub type PCSYMCRYPT_HMAC_SHA512_STATE = *const SYMCRYPT_HMAC_SHA512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_AES_EXPANDED_KEY {
    pub RoundKey: [[[BYTE; 4usize]; 4usize]; 29usize],
    pub lastEncRoundKey: *mut [[BYTE; 4usize]; 4usize],
    pub lastDecRoundKey: *mut [[BYTE; 4usize]; 4usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_AES_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_AES_EXPANDED_KEY>() - 496usize];
    ["Alignment of _SYMCRYPT_AES_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_AES_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::RoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, RoundKey) - 0usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::lastEncRoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, lastEncRoundKey) - 464usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::lastDecRoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, lastDecRoundKey) - 472usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, magic) - 480usize];
};
impl Default for _SYMCRYPT_AES_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_AES_EXPANDED_KEY = _SYMCRYPT_AES_EXPANDED_KEY;
pub type PSYMCRYPT_AES_EXPANDED_KEY = *mut _SYMCRYPT_AES_EXPANDED_KEY;
pub type PCSYMCRYPT_AES_EXPANDED_KEY = *const SYMCRYPT_AES_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_AES_CMAC_EXPANDED_KEY {
    pub aesKey: SYMCRYPT_AES_EXPANDED_KEY,
    pub K1: [BYTE; 16usize],
    pub K2: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_AES_CMAC_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_AES_CMAC_EXPANDED_KEY>() - 544usize];
    ["Alignment of _SYMCRYPT_AES_CMAC_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_AES_CMAC_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::aesKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, aesKey) - 0usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::K1"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, K1) - 496usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::K2"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, K2) - 512usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, magic) - 528usize];
};
impl Default for _SYMCRYPT_AES_CMAC_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_AES_CMAC_EXPANDED_KEY = _SYMCRYPT_AES_CMAC_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MAC_EXPANDED_KEY {
    pub md5Key: SYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    pub sha1Key: SYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    pub sha256Key: SYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    pub sha384Key: SYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    pub sha512Key: SYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    pub aescmacKey: SYMCRYPT_AES_CMAC_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MAC_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_MAC_EXPANDED_KEY>() - 544usize];
    ["Alignment of _SYMCRYPT_MAC_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_MAC_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::md5Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, md5Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha1Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha1Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha256Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha256Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha384Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha384Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha512Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha512Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::aescmacKey"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, aescmacKey) - 0usize];
};
impl Default for _SYMCRYPT_MAC_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MAC_EXPANDED_KEY = _SYMCRYPT_MAC_EXPANDED_KEY;
pub type PSYMCRYPT_MAC_EXPAND_KEY = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PVOID, pbKey: PCBYTE, cbKey: SIZE_T) -> SYMCRYPT_ERROR,
>;
pub type PSYMCRYPT_MAC_INIT =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pExpandedKey: PCVOID)>;
pub type PSYMCRYPT_MAC_APPEND =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbData: PCBYTE, cbData: SIZE_T)>;
pub type PSYMCRYPT_MAC_RESULT =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbResult: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MAC {
    pub expandKeyFunc: PSYMCRYPT_MAC_EXPAND_KEY,
    pub initFunc: PSYMCRYPT_MAC_INIT,
    pub appendFunc: PSYMCRYPT_MAC_APPEND,
    pub resultFunc: PSYMCRYPT_MAC_RESULT,
    pub expandedKeySize: SIZE_T,
    pub stateSize: SIZE_T,
    pub resultSize: SIZE_T,
    pub ppHashAlgorithm: *const PCSYMCRYPT_HASH,
    pub outerChainingStateOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MAC"][::std::mem::size_of::<_SYMCRYPT_MAC>() - 72usize];
    ["Alignment of _SYMCRYPT_MAC"][::std::mem::align_of::<_SYMCRYPT_MAC>() - 8usize];
    ["Offset of field: _SYMCRYPT_MAC::expandKeyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, expandKeyFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC::initFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, initFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_MAC::appendFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, appendFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_MAC::resultFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, resultFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_MAC::expandedKeySize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, expandedKeySize) - 32usize];
    ["Offset of field: _SYMCRYPT_MAC::stateSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, stateSize) - 40usize];
    ["Offset of field: _SYMCRYPT_MAC::resultSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, resultSize) - 48usize];
    ["Offset of field: _SYMCRYPT_MAC::ppHashAlgorithm"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, ppHashAlgorithm) - 56usize];
    ["Offset of field: _SYMCRYPT_MAC::outerChainingStateOffset"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, outerChainingStateOffset) - 64usize];
};
impl Default for _SYMCRYPT_MAC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MAC = _SYMCRYPT_MAC;
pub type PCSYMCRYPT_MAC = *const SYMCRYPT_MAC;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS {
    pub aes: SYMCRYPT_AES_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS"]
        [::std::mem::size_of::<_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS>() - 496usize];
    ["Alignment of _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS"]
        [::std::mem::align_of::<_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS::aes"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS, aes) - 0usize];
};
impl Default for _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS = _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_GF128_ELEMENT {
    pub ull: [UINT64; 2usize],
    pub m128i: __m128i,
    pub ul: [UINT32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GF128_ELEMENT"][::std::mem::size_of::<_SYMCRYPT_GF128_ELEMENT>() - 16usize];
    ["Alignment of _SYMCRYPT_GF128_ELEMENT"]
        [::std::mem::align_of::<_SYMCRYPT_GF128_ELEMENT>() - 16usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::ull"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, ull) - 0usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::m128i"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, m128i) - 0usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::ul"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, ul) - 0usize];
};
impl Default for _SYMCRYPT_GF128_ELEMENT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GF128_ELEMENT = _SYMCRYPT_GF128_ELEMENT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GHASH_EXPANDED_KEY {
    pub table: [SYMCRYPT_GF128_ELEMENT; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GHASH_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_GHASH_EXPANDED_KEY>() - 2048usize];
    ["Alignment of _SYMCRYPT_GHASH_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_GHASH_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_GHASH_EXPANDED_KEY::table"]
        [::std::mem::offset_of!(_SYMCRYPT_GHASH_EXPANDED_KEY, table) - 0usize];
};
impl Default for _SYMCRYPT_GHASH_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GHASH_EXPANDED_KEY = _SYMCRYPT_GHASH_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GCM_EXPANDED_KEY {
    pub ghashKey: SYMCRYPT_GHASH_EXPANDED_KEY,
    pub pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
    pub __bindgen_padding_0: u64,
    pub blockcipherKey: SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS,
    pub cbKey: SIZE_T,
    pub abKey: [BYTE; 32usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_GCM_EXPANDED_KEY>() - 2608usize];
    ["Alignment of _SYMCRYPT_GCM_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_GCM_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::ghashKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, ghashKey) - 0usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::pBlockCipher"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, pBlockCipher) - 2048usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::blockcipherKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, blockcipherKey) - 2064usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::cbKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, cbKey) - 2560usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::abKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, abKey) - 2568usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, magic) - 2600usize];
};
impl Default for _SYMCRYPT_GCM_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_EXPANDED_KEY = _SYMCRYPT_GCM_EXPANDED_KEY;
pub type PSYMCRYPT_GCM_EXPANDED_KEY = *mut _SYMCRYPT_GCM_EXPANDED_KEY;
pub type PCSYMCRYPT_GCM_EXPANDED_KEY = *const SYMCRYPT_GCM_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GCM_STATE {
    pub pKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
    pub cbData: UINT64,
    pub cbAuthData: UINT64,
    pub bytesInMacBlock: SIZE_T,
    pub ghashState: SYMCRYPT_GF128_ELEMENT,
    pub counterBlock: [BYTE; 16usize],
    pub macBlock: [BYTE; 16usize],
    pub keystreamBlock: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_STATE"][::std::mem::size_of::<_SYMCRYPT_GCM_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_GCM_STATE"][::std::mem::align_of::<_SYMCRYPT_GCM_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, pKey) - 0usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::cbData"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, cbData) - 8usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::cbAuthData"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, cbAuthData) - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::bytesInMacBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, bytesInMacBlock) - 24usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::ghashState"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, ghashState) - 32usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::counterBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, counterBlock) - 48usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::macBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, macBlock) - 64usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::keystreamBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, keystreamBlock) - 80usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, magic) - 96usize];
};
impl Default for _SYMCRYPT_GCM_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_STATE = _SYMCRYPT_GCM_STATE;
pub type PSYMCRYPT_GCM_STATE = *mut _SYMCRYPT_GCM_STATE;
pub type PCSYMCRYPT_GCM_STATE = *const SYMCRYPT_GCM_STATE;
pub type PSYMCRYPT_BLOCKCIPHER_EXPAND_KEY = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PVOID, pbKey: PCBYTE, cbKey: SIZE_T) -> SYMCRYPT_ERROR,
>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT =
    ::std::option::Option<unsafe extern "C" fn(pExpandedKey: PCVOID, pbSrc: PCBYTE, pbDst: PBYTE)>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PCVOID, pbSrc: PCBYTE, pbDst: PBYTE, cbData: SIZE_T),
>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE = ::std::option::Option<
    unsafe extern "C" fn(
        pExpandedKey: PCVOID,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    ),
>;
pub type PSYMCRYPT_BLOCKCIPHER_MAC_MODE = ::std::option::Option<
    unsafe extern "C" fn(
        pExpandedKey: PCVOID,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        cbData: SIZE_T,
    ),
>;
pub type PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE = ::std::option::Option<
    unsafe extern "C" fn(pState: PVOID, pbSrc: PCBYTE, pbDst: PBYTE, cbData: SIZE_T),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_BLOCKCIPHER {
    pub expandKeyFunc: PSYMCRYPT_BLOCKCIPHER_EXPAND_KEY,
    pub encryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT,
    pub decryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT,
    pub ecbEncryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB,
    pub ecbDecryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB,
    pub cbcEncryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub cbcDecryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub cbcMacFunc: PSYMCRYPT_BLOCKCIPHER_MAC_MODE,
    pub ctrMsb64Func: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub gcmEncryptPartFunc: PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE,
    pub gcmDecryptPartFunc: PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE,
    pub blockSize: SIZE_T,
    pub expandedKeySize: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_BLOCKCIPHER"][::std::mem::size_of::<_SYMCRYPT_BLOCKCIPHER>() - 104usize];
    ["Alignment of _SYMCRYPT_BLOCKCIPHER"]
        [::std::mem::align_of::<_SYMCRYPT_BLOCKCIPHER>() - 8usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::expandKeyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, expandKeyFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::encryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, encryptFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::decryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, decryptFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ecbEncryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ecbEncryptFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ecbDecryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ecbDecryptFunc) - 32usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcEncryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcEncryptFunc) - 40usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcDecryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcDecryptFunc) - 48usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcMacFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcMacFunc) - 56usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ctrMsb64Func"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ctrMsb64Func) - 64usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::gcmEncryptPartFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, gcmEncryptPartFunc) - 72usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::gcmDecryptPartFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, gcmDecryptPartFunc) - 80usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::blockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, blockSize) - 88usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::expandedKeySize"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, expandedKeySize) - 96usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_TLSPRF1_2_EXPANDED_KEY = _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
pub type PSYMCRYPT_TLSPRF1_2_EXPANDED_KEY = *mut _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
pub type PCSYMCRYPT_TLSPRF1_2_EXPANDED_KEY = *const SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HKDF_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HKDF_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HKDF_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_HKDF_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HKDF_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HKDF_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HKDF_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_HKDF_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_HKDF_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_HKDF_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HKDF_EXPANDED_KEY = _SYMCRYPT_HKDF_EXPANDED_KEY;
pub type PSYMCRYPT_HKDF_EXPANDED_KEY = *mut _SYMCRYPT_HKDF_EXPANDED_KEY;
pub type PCSYMCRYPT_HKDF_EXPANDED_KEY = *const SYMCRYPT_HKDF_EXPANDED_KEY;
pub type SYMCRYPT_INT = _SYMCRYPT_INT;
pub type PSYMCRYPT_INT = *mut SYMCRYPT_INT;
pub type SYMCRYPT_DIVISOR = _SYMCRYPT_DIVISOR;
pub type SYMCRYPT_MODULUS = _SYMCRYPT_MODULUS;
pub type PSYMCRYPT_MODULUS = *mut SYMCRYPT_MODULUS;
pub type SYMCRYPT_MODELEMENT = _SYMCRYPT_MODELEMENT;
pub type PSYMCRYPT_MODELEMENT = *mut SYMCRYPT_MODELEMENT;
pub type SYMCRYPT_ECPOINT = _SYMCRYPT_ECPOINT;
pub type PSYMCRYPT_ECPOINT = *mut SYMCRYPT_ECPOINT;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_INT {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub magic: SIZE_T,
    pub __bindgen_padding_0: u64,
    pub ti: _SYMCRYPT_INT__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_INT__bindgen_ty_1 {
    pub fdef: _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1 {
    pub uint32: [UINT32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1, uint32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_INT__bindgen_ty_1>() - 32usize];
    ["Alignment of _SYMCRYPT_INT__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_INT__bindgen_ty_1>() - 32usize];
    ["Offset of field: _SYMCRYPT_INT__bindgen_ty_1::fdef"]
        [::std::mem::offset_of!(_SYMCRYPT_INT__bindgen_ty_1, fdef) - 0usize];
};
impl Default for _SYMCRYPT_INT__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT"][::std::mem::size_of::<_SYMCRYPT_INT>() - 64usize];
    ["Alignment of _SYMCRYPT_INT"][::std::mem::align_of::<_SYMCRYPT_INT>() - 32usize];
    ["Offset of field: _SYMCRYPT_INT::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_INT::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_INT::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_INT::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, magic) - 16usize];
    ["Offset of field: _SYMCRYPT_INT::ti"][::std::mem::offset_of!(_SYMCRYPT_INT, ti) - 32usize];
};
impl Default for _SYMCRYPT_INT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_DIVISOR {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub nBits: UINT32,
    pub magic: SIZE_T,
    pub td: _SYMCRYPT_DIVISOR__bindgen_ty_1,
    pub Int: SYMCRYPT_INT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_DIVISOR__bindgen_ty_1 {
    pub fdef: _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1 {
    pub W: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1::W"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1, W) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_DIVISOR__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR__bindgen_ty_1::fdef"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR__bindgen_ty_1, fdef) - 0usize];
};
impl Default for _SYMCRYPT_DIVISOR__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR"][::std::mem::size_of::<_SYMCRYPT_DIVISOR>() - 96usize];
    ["Alignment of _SYMCRYPT_DIVISOR"][::std::mem::align_of::<_SYMCRYPT_DIVISOR>() - 32usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::nBits"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, nBits) - 12usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, magic) - 16usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::td"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, td) - 24usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::Int"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, Int) - 32usize];
};
impl Default for _SYMCRYPT_DIVISOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_MODULUS {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub flags: UINT32,
    pub cbModElement: UINT32,
    pub inv64: UINT64,
    pub magic: SIZE_T,
    pub tm: _SYMCRYPT_MODULUS__bindgen_ty_1,
    pub __bindgen_padding_0: [u64; 2usize],
    pub Divisor: SYMCRYPT_DIVISOR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MODULUS__bindgen_ty_1 {
    pub montgomery: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1,
    pub pseudoMersenne: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1 {
    pub Rsqr: PCUINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1::Rsqr"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1, Rsqr) - 0usize];
};
impl Default for _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2 {
    pub k: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2::k"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2, k) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1::montgomery"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1, montgomery) - 0usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1::pseudoMersenne"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1, pseudoMersenne) - 0usize];
};
impl Default for _SYMCRYPT_MODULUS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS"][::std::mem::size_of::<_SYMCRYPT_MODULUS>() - 160usize];
    ["Alignment of _SYMCRYPT_MODULUS"][::std::mem::align_of::<_SYMCRYPT_MODULUS>() - 32usize];
    ["Offset of field: _SYMCRYPT_MODULUS::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_MODULUS::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_MODULUS::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS::flags"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, flags) - 12usize];
    ["Offset of field: _SYMCRYPT_MODULUS::cbModElement"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, cbModElement) - 16usize];
    ["Offset of field: _SYMCRYPT_MODULUS::inv64"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, inv64) - 24usize];
    ["Offset of field: _SYMCRYPT_MODULUS::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, magic) - 32usize];
    ["Offset of field: _SYMCRYPT_MODULUS::tm"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, tm) - 40usize];
    ["Offset of field: _SYMCRYPT_MODULUS::Divisor"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, Divisor) - 64usize];
};
impl Default for _SYMCRYPT_MODULUS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_MODELEMENT {
    pub d: _SYMCRYPT_MODELEMENT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MODELEMENT__bindgen_ty_1 {
    pub uint32: [UINT32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODELEMENT__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODELEMENT__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYMCRYPT_MODELEMENT__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODELEMENT__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SYMCRYPT_MODELEMENT__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(_SYMCRYPT_MODELEMENT__bindgen_ty_1, uint32) - 0usize];
};
impl Default for _SYMCRYPT_MODELEMENT__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODELEMENT"][::std::mem::size_of::<_SYMCRYPT_MODELEMENT>() - 32usize];
    ["Alignment of _SYMCRYPT_MODELEMENT"][::std::mem::align_of::<_SYMCRYPT_MODELEMENT>() - 32usize];
    ["Offset of field: _SYMCRYPT_MODELEMENT::d"]
        [::std::mem::offset_of!(_SYMCRYPT_MODELEMENT, d) - 0usize];
};
impl Default for _SYMCRYPT_MODELEMENT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RSAKEY {
    pub fAlgorithmInfo: UINT32,
    pub cbTotalSize: UINT32,
    pub hasPrivateKey: BOOLEAN,
    pub nSetBitsOfModulus: UINT32,
    pub nBitsOfModulus: UINT32,
    pub nDigitsOfModulus: UINT32,
    pub nPubExp: UINT32,
    pub nPrimes: UINT32,
    pub nBitsOfPrimes: [UINT32; 2usize],
    pub nDigitsOfPrimes: [UINT32; 2usize],
    pub nMaxDigitsOfPrimes: UINT32,
    pub au64PubExp: [UINT64; 1usize],
    pub pbPrimes: [PBYTE; 2usize],
    pub pbCrtInverses: [PBYTE; 2usize],
    pub pbPrivExps: [PBYTE; 1usize],
    pub pbCrtPrivExps: [PBYTE; 2usize],
    pub pmModulus: PSYMCRYPT_MODULUS,
    pub pmPrimes: [PSYMCRYPT_MODULUS; 2usize],
    pub peCrtInverses: [PSYMCRYPT_MODELEMENT; 2usize],
    pub piPrivExps: [PSYMCRYPT_INT; 1usize],
    pub piCrtPrivExps: [PSYMCRYPT_INT; 2usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RSAKEY"][::std::mem::size_of::<_SYMCRYPT_RSAKEY>() - 192usize];
    ["Alignment of _SYMCRYPT_RSAKEY"][::std::mem::align_of::<_SYMCRYPT_RSAKEY>() - 32usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::fAlgorithmInfo"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, fAlgorithmInfo) - 0usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::cbTotalSize"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, cbTotalSize) - 4usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::hasPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, hasPrivateKey) - 8usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nSetBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nSetBitsOfModulus) - 12usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nBitsOfModulus) - 16usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nDigitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nDigitsOfModulus) - 20usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nPubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nPubExp) - 24usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nPrimes) - 28usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nBitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nBitsOfPrimes) - 32usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nDigitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nDigitsOfPrimes) - 40usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nMaxDigitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nMaxDigitsOfPrimes) - 48usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::au64PubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, au64PubExp) - 56usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbPrimes) - 64usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbCrtInverses"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbCrtInverses) - 80usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbPrivExps) - 96usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbCrtPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbCrtPrivExps) - 104usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pmModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pmModulus) - 120usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pmPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pmPrimes) - 128usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::peCrtInverses"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, peCrtInverses) - 144usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::piPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, piPrivExps) - 160usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::piCrtPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, piCrtPrivExps) - 168usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, magic) - 184usize];
};
impl Default for _SYMCRYPT_RSAKEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RSAKEY = _SYMCRYPT_RSAKEY;
pub type PSYMCRYPT_RSAKEY = *mut SYMCRYPT_RSAKEY;
pub type PCSYMCRYPT_RSAKEY = *const SYMCRYPT_RSAKEY;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_INVALID:
    _SYMCRYPT_ECPOINT_COORDINATES = 0;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_SINGLE:
    _SYMCRYPT_ECPOINT_COORDINATES = 17;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_AFFINE:
    _SYMCRYPT_ECPOINT_COORDINATES = 34;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 51;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_JACOBIAN:
    _SYMCRYPT_ECPOINT_COORDINATES = 67;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_EXTENDED_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 84;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_SINGLE_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 98;
pub type _SYMCRYPT_ECPOINT_COORDINATES = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECPOINT_COORDINATES as SYMCRYPT_ECPOINT_COORDINATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECURVE_INFO_PRECOMP {
    pub window: UINT32,
    pub nPrecompPoints: UINT32,
    pub nRecodedDigits: UINT32,
    pub poPrecompPoints: [PSYMCRYPT_ECPOINT; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE_INFO_PRECOMP"]
        [::std::mem::size_of::<_SYMCRYPT_ECURVE_INFO_PRECOMP>() - 528usize];
    ["Alignment of _SYMCRYPT_ECURVE_INFO_PRECOMP"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE_INFO_PRECOMP>() - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::window"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, window) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::nPrecompPoints"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, nPrecompPoints) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::nRecodedDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, nRecodedDigits) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::poPrecompPoints"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, poPrecompPoints) - 16usize];
};
impl Default for _SYMCRYPT_ECURVE_INFO_PRECOMP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE_INFO_PRECOMP = _SYMCRYPT_ECURVE_INFO_PRECOMP;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_SHORT_WEIERSTRASS:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 1;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_TWISTED_EDWARDS:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 2;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_MONTGOMERY:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 3;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_SHORT_WEIERSTRASS_AM3:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 4;
pub type _SYMCRYPT_INTERNAL_ECURVE_TYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_INTERNAL_ECURVE_TYPE as SYMCRYPT_INTERNAL_ECURVE_TYPE;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_ECURVE {
    pub version: UINT32,
    pub type_: SYMCRYPT_INTERNAL_ECURVE_TYPE,
    pub eCoordinates: SYMCRYPT_ECPOINT_COORDINATES,
    pub FModBitsize: UINT32,
    pub FModDigits: UINT32,
    pub FModBytesize: UINT32,
    pub GOrdBitsize: UINT32,
    pub GOrdDigits: UINT32,
    pub GOrdBytesize: UINT32,
    pub cbModElement: UINT32,
    pub cbAlloc: UINT32,
    pub cbScratchCommon: UINT32,
    pub cbScratchScalar: UINT32,
    pub cbScratchScalarMulti: UINT32,
    pub cbScratchGetSetValue: UINT32,
    pub cbScratchEckey: UINT32,
    pub coFactorPower: UINT32,
    pub PrivateKeyDefaultFormat: UINT32,
    pub HighBitRestrictionNumOfBits: UINT32,
    pub HighBitRestrictionPosition: UINT32,
    pub HighBitRestrictionValue: UINT32,
    pub info: _SYMCRYPT_ECURVE__bindgen_ty_1,
    pub FMod: PSYMCRYPT_MODULUS,
    pub GOrd: PSYMCRYPT_MODULUS,
    pub A: PSYMCRYPT_MODELEMENT,
    pub B: PSYMCRYPT_MODELEMENT,
    pub G: PSYMCRYPT_ECPOINT,
    pub H: PSYMCRYPT_INT,
    pub magic: SIZE_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_ECURVE__bindgen_ty_1 {
    pub sw: SYMCRYPT_ECURVE_INFO_PRECOMP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_ECURVE__bindgen_ty_1>() - 528usize];
    ["Alignment of _SYMCRYPT_ECURVE__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE__bindgen_ty_1::sw"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE__bindgen_ty_1, sw) - 0usize];
};
impl Default for _SYMCRYPT_ECURVE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE"][::std::mem::size_of::<_SYMCRYPT_ECURVE>() - 672usize];
    ["Alignment of _SYMCRYPT_ECURVE"][::std::mem::align_of::<_SYMCRYPT_ECURVE>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECURVE::version"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, version) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, type_) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE::eCoordinates"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, eCoordinates) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModBitsize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModBitsize) - 12usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModDigits) - 16usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModBytesize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModBytesize) - 20usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdBitsize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdBitsize) - 24usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdDigits) - 28usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdBytesize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdBytesize) - 32usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbModElement"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbModElement) - 36usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbAlloc"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbAlloc) - 40usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchCommon"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchCommon) - 44usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchScalar"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchScalar) - 48usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchScalarMulti"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchScalarMulti) - 52usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchGetSetValue"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchGetSetValue) - 56usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchEckey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchEckey) - 60usize];
    ["Offset of field: _SYMCRYPT_ECURVE::coFactorPower"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, coFactorPower) - 64usize];
    ["Offset of field: _SYMCRYPT_ECURVE::PrivateKeyDefaultFormat"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, PrivateKeyDefaultFormat) - 68usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionNumOfBits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionNumOfBits) - 72usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionPosition"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionPosition) - 76usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionValue"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionValue) - 80usize];
    ["Offset of field: _SYMCRYPT_ECURVE::info"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, info) - 88usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FMod"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FMod) - 616usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrd"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrd) - 624usize];
    ["Offset of field: _SYMCRYPT_ECURVE::A"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, A) - 632usize];
    ["Offset of field: _SYMCRYPT_ECURVE::B"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, B) - 640usize];
    ["Offset of field: _SYMCRYPT_ECURVE::G"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, G) - 648usize];
    ["Offset of field: _SYMCRYPT_ECURVE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, H) - 656usize];
    ["Offset of field: _SYMCRYPT_ECURVE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, magic) - 664usize];
};
impl Default for _SYMCRYPT_ECURVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE = _SYMCRYPT_ECURVE;
pub type PSYMCRYPT_ECURVE = *mut SYMCRYPT_ECURVE;
pub type PCSYMCRYPT_ECURVE = *const SYMCRYPT_ECURVE;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECPOINT {
    pub normalized: BOOLEAN,
    pub pCurve: PCSYMCRYPT_ECURVE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECPOINT"][::std::mem::size_of::<_SYMCRYPT_ECPOINT>() - 32usize];
    ["Alignment of _SYMCRYPT_ECPOINT"][::std::mem::align_of::<_SYMCRYPT_ECPOINT>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::normalized"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, normalized) - 0usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::pCurve"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, pCurve) - 8usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, magic) - 16usize];
};
impl Default for _SYMCRYPT_ECPOINT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECKEY {
    pub fAlgorithmInfo: UINT32,
    pub hasPrivateKey: BOOLEAN,
    pub pCurve: PCSYMCRYPT_ECURVE,
    pub poPublicKey: PSYMCRYPT_ECPOINT,
    pub piPrivateKey: PSYMCRYPT_INT,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECKEY"][::std::mem::size_of::<_SYMCRYPT_ECKEY>() - 64usize];
    ["Alignment of _SYMCRYPT_ECKEY"][::std::mem::align_of::<_SYMCRYPT_ECKEY>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECKEY::fAlgorithmInfo"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, fAlgorithmInfo) - 0usize];
    ["Offset of field: _SYMCRYPT_ECKEY::hasPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, hasPrivateKey) - 4usize];
    ["Offset of field: _SYMCRYPT_ECKEY::pCurve"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, pCurve) - 8usize];
    ["Offset of field: _SYMCRYPT_ECKEY::poPublicKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, poPublicKey) - 16usize];
    ["Offset of field: _SYMCRYPT_ECKEY::piPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, piPrivateKey) - 24usize];
    ["Offset of field: _SYMCRYPT_ECKEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, magic) - 32usize];
};
impl Default for _SYMCRYPT_ECKEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECKEY = _SYMCRYPT_ECKEY;
pub type PSYMCRYPT_ECKEY = *mut SYMCRYPT_ECKEY;
pub type PCSYMCRYPT_ECKEY = *const SYMCRYPT_ECKEY;
unsafe extern "C" {
    pub fn SymCryptWipe(pbData: PVOID, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptLoadMsbFirstUint64(
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        pDst: PUINT64,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptStoreMsbFirstUint64(src: UINT64, pbDst: PBYTE, cbDst: SIZE_T) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptModuleInit(api: UINT32, minor: UINT32);
}
unsafe extern "C" {
    pub fn SymCryptMd5(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptMd5Init(pState: PSYMCRYPT_MD5_STATE);
}
unsafe extern "C" {
    pub fn SymCryptMd5Append(pState: PSYMCRYPT_MD5_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptMd5Result(pState: PSYMCRYPT_MD5_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptMd5StateCopy(pSrc: PCSYMCRYPT_MD5_STATE, pDst: PSYMCRYPT_MD5_STATE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptMd5Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha1(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha1Init(pState: PSYMCRYPT_SHA1_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha1Append(pState: PSYMCRYPT_SHA1_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha1Result(pState: PSYMCRYPT_SHA1_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha1StateCopy(pSrc: PCSYMCRYPT_SHA1_STATE, pDst: PSYMCRYPT_SHA1_STATE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha1Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha256(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha256Init(pState: PSYMCRYPT_SHA256_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha256Append(pState: PSYMCRYPT_SHA256_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha256Result(pState: PSYMCRYPT_SHA256_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha256StateCopy(pSrc: PCSYMCRYPT_SHA256_STATE, pDst: PSYMCRYPT_SHA256_STATE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha256Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha384(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha384Init(pState: PSYMCRYPT_SHA384_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha384Append(pState: PSYMCRYPT_SHA384_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha384Result(pState: PSYMCRYPT_SHA384_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha384StateCopy(pSrc: PCSYMCRYPT_SHA384_STATE, pDst: PSYMCRYPT_SHA384_STATE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha384Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha512(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha512Init(pState: PSYMCRYPT_SHA512_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha512Append(pState: PSYMCRYPT_SHA512_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha512Result(pState: PSYMCRYPT_SHA512_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha512StateCopy(pSrc: PCSYMCRYPT_SHA512_STATE, pDst: PSYMCRYPT_SHA512_STATE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha512Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha3_256(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Init(pState: PSYMCRYPT_SHA3_256_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Append(pState: PSYMCRYPT_SHA3_256_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Result(pState: PSYMCRYPT_SHA3_256_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256StateCopy(
        pSrc: PCSYMCRYPT_SHA3_256_STATE,
        pDst: PSYMCRYPT_SHA3_256_STATE,
    );
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_256Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha3_384(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Init(pState: PSYMCRYPT_SHA3_384_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Append(pState: PSYMCRYPT_SHA3_384_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Result(pState: PSYMCRYPT_SHA3_384_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384StateCopy(
        pSrc: PCSYMCRYPT_SHA3_384_STATE,
        pDst: PSYMCRYPT_SHA3_384_STATE,
    );
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_384Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptSha3_512(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Init(pState: PSYMCRYPT_SHA3_512_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Append(pState: PSYMCRYPT_SHA3_512_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Result(pState: PSYMCRYPT_SHA3_512_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512StateCopy(
        pSrc: PCSYMCRYPT_SHA3_512_STATE,
        pDst: PSYMCRYPT_SHA3_512_STATE,
    );
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_512Algorithm: PCSYMCRYPT_HASH;
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5(
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5StateCopy(
        pSrc: PCSYMCRYPT_HMAC_MD5_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_MD5_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Init(
        pState: PSYMCRYPT_HMAC_MD5_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Append(pState: PSYMCRYPT_HMAC_MD5_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Result(pState: PSYMCRYPT_HMAC_MD5_STATE, pbResult: PBYTE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptHmacMd5Algorithm: PCSYMCRYPT_MAC;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA1_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA1_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Init(
        pState: PSYMCRYPT_HMAC_SHA1_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Append(
        pState: PSYMCRYPT_HMAC_SHA1_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Result(pState: PSYMCRYPT_HMAC_SHA1_STATE, pbResult: PBYTE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptHmacSha1Algorithm: PCSYMCRYPT_MAC;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA256_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA256_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Init(
        pState: PSYMCRYPT_HMAC_SHA256_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Append(
        pState: PSYMCRYPT_HMAC_SHA256_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Result(pState: PSYMCRYPT_HMAC_SHA256_STATE, pbResult: PBYTE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptHmacSha256Algorithm: PCSYMCRYPT_MAC;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA384_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA384_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Init(
        pState: PSYMCRYPT_HMAC_SHA384_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Append(
        pState: PSYMCRYPT_HMAC_SHA384_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Result(pState: PSYMCRYPT_HMAC_SHA384_STATE, pbResult: PBYTE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptHmacSha384Algorithm: PCSYMCRYPT_MAC;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA512_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA512_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Init(
        pState: PSYMCRYPT_HMAC_SHA512_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Append(
        pState: PSYMCRYPT_HMAC_SHA512_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Result(pState: PSYMCRYPT_HMAC_SHA512_STATE, pbResult: PBYTE);
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptHmacSha512Algorithm: PCSYMCRYPT_MAC;
}
unsafe extern "C" {
    pub fn SymCryptChaCha20Poly1305Encrypt(
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptChaCha20Poly1305Decrypt(
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptAesExpandKey(
        pExpandedKey: PSYMCRYPT_AES_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptAesCbcEncrypt(
        pExpandedKey: PCSYMCRYPT_AES_EXPANDED_KEY,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptAesCbcDecrypt(
        pExpandedKey: PCSYMCRYPT_AES_EXPANDED_KEY,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptAesBlockCipher: PCSYMCRYPT_BLOCKCIPHER;
}
unsafe extern "C" {
    pub fn SymCryptGcmValidateParameters(
        pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
        cbNonce: SIZE_T,
        cbAssociatedData: UINT64,
        cbData: UINT64,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmExpandKey(
        pExpandedKey: PSYMCRYPT_GCM_EXPANDED_KEY,
        pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmEncrypt(
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PBYTE,
        cbTag: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmDecrypt(
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmInit(
        pState: PSYMCRYPT_GCM_STATE,
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmStateCopy(
        pSrc: PCSYMCRYPT_GCM_STATE,
        pExpandedKeyCopy: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pDst: PSYMCRYPT_GCM_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmAuthPart(pState: PSYMCRYPT_GCM_STATE, pbAuthData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptGcmEncryptPart(
        pState: PSYMCRYPT_GCM_STATE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmEncryptFinal(pState: PSYMCRYPT_GCM_STATE, pbTag: PBYTE, cbTag: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptGcmDecryptPart(
        pState: PSYMCRYPT_GCM_STATE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmDecryptFinal(
        pState: PSYMCRYPT_GCM_STATE,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2ExpandKey(
        pExpandedKey: PSYMCRYPT_TLSPRF1_2_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2Derive(
        pExpandedKey: PCSYMCRYPT_TLSPRF1_2_EXPANDED_KEY,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        pbSeed: PCBYTE,
        cbSeed: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        pbSeed: PCBYTE,
        cbSeed: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfExpandKey(
        pExpandedKey: PSYMCRYPT_HKDF_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfExtractPrk(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
        pbPrk: PBYTE,
        cbPrk: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfPrkExpandKey(
        pExpandedKey: PSYMCRYPT_HKDF_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbPrk: PCBYTE,
        cbPrk: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfDerive(
        pExpandedKey: PCSYMCRYPT_HKDF_EXPANDED_KEY,
        pbInfo: PCBYTE,
        cbInfo: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdf(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
        pbInfo: PCBYTE,
        cbInfo: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfSelfTest();
}
unsafe extern "C" {
    pub fn SymCryptRandom(pbRandom: PBYTE, cbRandom: SIZE_T);
}
pub const _SYMCRYPT_NUMBER_FORMAT_SYMCRYPT_NUMBER_FORMAT_LSB_FIRST: _SYMCRYPT_NUMBER_FORMAT = 1;
pub const _SYMCRYPT_NUMBER_FORMAT_SYMCRYPT_NUMBER_FORMAT_MSB_FIRST: _SYMCRYPT_NUMBER_FORMAT = 2;
pub type _SYMCRYPT_NUMBER_FORMAT = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_NUMBER_FORMAT as SYMCRYPT_NUMBER_FORMAT;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_RSA_PARAMS {
    pub version: UINT32,
    pub nBitsOfModulus: UINT32,
    pub nPrimes: UINT32,
    pub nPubExp: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RSA_PARAMS"][::std::mem::size_of::<_SYMCRYPT_RSA_PARAMS>() - 16usize];
    ["Alignment of _SYMCRYPT_RSA_PARAMS"][::std::mem::align_of::<_SYMCRYPT_RSA_PARAMS>() - 4usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::version"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, version) - 0usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nBitsOfModulus) - 4usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nPrimes) - 8usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nPubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nPubExp) - 12usize];
};
pub type SYMCRYPT_RSA_PARAMS = _SYMCRYPT_RSA_PARAMS;
pub type PCSYMCRYPT_RSA_PARAMS = *const SYMCRYPT_RSA_PARAMS;
pub const _SYMCRYPT_ECURVE_GEN_ALG_ID_SYMCRYPT_ECURVE_GEN_ALG_ID_NULL: _SYMCRYPT_ECURVE_GEN_ALG_ID =
    0;
pub type _SYMCRYPT_ECURVE_GEN_ALG_ID = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECURVE_GEN_ALG_ID as SYMCRYPT_ECURVE_GEN_ALG_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECURVE_PARAMS {
    pub version: UINT32,
    pub type_: SYMCRYPT_ECURVE_TYPE,
    pub algId: SYMCRYPT_ECURVE_GEN_ALG_ID,
    pub cbFieldLength: UINT32,
    pub cbSubgroupOrder: UINT32,
    pub cbCofactor: UINT32,
    pub cbSeed: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE_PARAMS"][::std::mem::size_of::<_SYMCRYPT_ECURVE_PARAMS>() - 28usize];
    ["Alignment of _SYMCRYPT_ECURVE_PARAMS"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE_PARAMS>() - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::version"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, version) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, type_) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::algId"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, algId) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbFieldLength"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbFieldLength) - 12usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbSubgroupOrder"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbSubgroupOrder) - 16usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbCofactor"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbCofactor) - 20usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbSeed) - 24usize];
};
impl Default for _SYMCRYPT_ECURVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE_PARAMS = _SYMCRYPT_ECURVE_PARAMS;
pub type PCSYMCRYPT_ECURVE_PARAMS = *const SYMCRYPT_ECURVE_PARAMS;
pub const _SYMCRYPT_ECPOINT_FORMAT_SYMCRYPT_ECPOINT_FORMAT_X: _SYMCRYPT_ECPOINT_FORMAT = 1;
pub const _SYMCRYPT_ECPOINT_FORMAT_SYMCRYPT_ECPOINT_FORMAT_XY: _SYMCRYPT_ECPOINT_FORMAT = 2;
pub type _SYMCRYPT_ECPOINT_FORMAT = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECPOINT_FORMAT as SYMCRYPT_ECPOINT_FORMAT;
unsafe extern "C" {
    pub fn SymCryptRsakeyAllocate(
        pParams: PCSYMCRYPT_RSA_PARAMS,
        flags: UINT32,
    ) -> PSYMCRYPT_RSAKEY;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyFree(pkObj: PSYMCRYPT_RSAKEY);
}
unsafe extern "C" {
    pub fn SymCryptEcurveAllocate(
        pParams: PCSYMCRYPT_ECURVE_PARAMS,
        flags: UINT32,
    ) -> PSYMCRYPT_ECURVE;
}
unsafe extern "C" {
    pub fn SymCryptEcurveFree(pCurve: PSYMCRYPT_ECURVE);
}
unsafe extern "C" {
    pub fn SymCryptEckeyAllocate(pCurve: PCSYMCRYPT_ECURVE) -> PSYMCRYPT_ECKEY;
}
unsafe extern "C" {
    pub fn SymCryptEckeyFree(pkObj: PSYMCRYPT_ECKEY);
}
unsafe extern "C" {
    pub fn SymCryptRsakeyHasPrivateKey(pkRsakey: PCSYMCRYPT_RSAKEY) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofModulus(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyModulusBits(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofPublicExponent(pRsakey: PCSYMCRYPT_RSAKEY, index: UINT32) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofPrime(pkRsakey: PCSYMCRYPT_RSAKEY, index: UINT32) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetNumberOfPublicExponents(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetNumberOfPrimes(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGenerate(
        pkRsakey: PSYMCRYPT_RSAKEY,
        pu64PubExp: PCUINT64,
        nPubExp: UINT32,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySetValue(
        pbModulus: PCBYTE,
        cbModulus: SIZE_T,
        pu64PubExp: PCUINT64,
        nPubExp: UINT32,
        ppPrimes: *mut PCBYTE,
        pcbPrimes: *mut SIZE_T,
        nPrimes: UINT32,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pkRsakey: PSYMCRYPT_RSAKEY,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetValue(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbModulus: PBYTE,
        cbModulus: SIZE_T,
        pu64PubExp: PUINT64,
        nPubExp: UINT32,
        ppPrimes: *mut PBYTE,
        pcbPrimes: *mut SIZE_T,
        nPrimes: UINT32,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetCrtValue(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        ppCrtExponents: *mut PBYTE,
        pcbCrtExponents: *mut SIZE_T,
        nCrtExponents: UINT32,
        pbCrtCoefficient: PBYTE,
        cbCrtCoefficient: SIZE_T,
        pbPrivateExponent: PBYTE,
        cbPrivateExponent: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyExtendKeyUsage(
        pkRsakey: PSYMCRYPT_RSAKEY,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcurveSizeofFieldElement(pCurve: PCSYMCRYPT_ECURVE) -> UINT32;
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptEcurveParamsNistP256: PCSYMCRYPT_ECURVE_PARAMS;
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptEcurveParamsNistP384: PCSYMCRYPT_ECURVE_PARAMS;
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptEcurveParamsNistP521: PCSYMCRYPT_ECURVE_PARAMS;
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptEcurveParamsCurve25519: PCSYMCRYPT_ECURVE_PARAMS;
}
unsafe extern "C" {
    pub fn SymCryptEckeySizeofPublicKey(
        pkEckey: PCSYMCRYPT_ECKEY,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
    ) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptEckeySizeofPrivateKey(pkEckey: PCSYMCRYPT_ECKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptEckeySetValue(
        pbPrivateKey: PCBYTE,
        cbPrivateKey: SIZE_T,
        pbPublicKey: PCBYTE,
        cbPublicKey: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
        flags: UINT32,
        pEckey: PSYMCRYPT_ECKEY,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEckeySetRandom(flags: UINT32, pEckey: PSYMCRYPT_ECKEY) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEckeyGetValue(
        pEckey: PCSYMCRYPT_ECKEY,
        pbPrivateKey: PBYTE,
        cbPrivateKey: SIZE_T,
        pbPublicKey: PBYTE,
        cbPublicKey: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Encrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        flags: UINT32,
        nfDst: SYMCRYPT_NUMBER_FORMAT,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Decrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        nfSrc: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaOaepEncrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        hashAlgorithm: PCSYMCRYPT_HASH,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        flags: UINT32,
        nfDst: SYMCRYPT_NUMBER_FORMAT,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaOaepDecrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        nfSrc: SYMCRYPT_NUMBER_FORMAT,
        hashAlgorithm: PCSYMCRYPT_HASH,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        flags: UINT32,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_OID {
    pub cbOID: UINT32,
    pub pbOID: PCBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_OID"][::std::mem::size_of::<_SYMCRYPT_OID>() - 16usize];
    ["Alignment of _SYMCRYPT_OID"][::std::mem::align_of::<_SYMCRYPT_OID>() - 8usize];
    ["Offset of field: _SYMCRYPT_OID::cbOID"]
        [::std::mem::offset_of!(_SYMCRYPT_OID, cbOID) - 0usize];
    ["Offset of field: _SYMCRYPT_OID::pbOID"]
        [::std::mem::offset_of!(_SYMCRYPT_OID, pbOID) - 8usize];
};
impl Default for _SYMCRYPT_OID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_OID = _SYMCRYPT_OID;
pub type PCSYMCRYPT_OID = *const SYMCRYPT_OID;
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptMd5OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha1OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha256OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha384OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha512OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_256OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_384OidList: [SYMCRYPT_OID; 2usize];
}
#[cfg_attr(feature = "dynamic", link(name = "symcrypt", kind = "dylib"))]
unsafe extern "C" {
    pub static SymCryptSha3_512OidList: [SYMCRYPT_OID; 2usize];
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Sign(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pHashOIDs: PCSYMCRYPT_OID,
        nOIDCount: SIZE_T,
        flags: UINT32,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
        pcbSignature: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Verify(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pHashOID: PCSYMCRYPT_OID,
        nOIDCount: SIZE_T,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPssSign(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        hashAlgorithm: PCSYMCRYPT_HASH,
        cbSalt: SIZE_T,
        flags: UINT32,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
        pcbSignature: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPssVerify(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        hashAlgorithm: PCSYMCRYPT_HASH,
        cbSalt: SIZE_T,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDsaSign(
        pKey: PCSYMCRYPT_ECKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDsaVerify(
        pKey: PCSYMCRYPT_ECKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDhSecretAgreement(
        pkPrivate: PCSYMCRYPT_ECKEY,
        pkPublic: PCSYMCRYPT_ECKEY,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbAgreedSecret: PBYTE,
        cbAgreedSecret: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
