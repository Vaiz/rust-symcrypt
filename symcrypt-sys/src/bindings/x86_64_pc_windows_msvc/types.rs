/* automatically generated by rust-bindgen 0.71.1 */

pub const SYMCRYPT_ERROR_SYMCRYPT_NO_ERROR: SYMCRYPT_ERROR = 0;
pub const SYMCRYPT_ERROR_SYMCRYPT_UNUSED: SYMCRYPT_ERROR = 32768;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_KEY_SIZE: SYMCRYPT_ERROR = 32769;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_BLOCK_SIZE: SYMCRYPT_ERROR = 32770;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_DATA_SIZE: SYMCRYPT_ERROR = 32771;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_NONCE_SIZE: SYMCRYPT_ERROR = 32772;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_TAG_SIZE: SYMCRYPT_ERROR = 32773;
pub const SYMCRYPT_ERROR_SYMCRYPT_WRONG_ITERATION_COUNT: SYMCRYPT_ERROR = 32774;
pub const SYMCRYPT_ERROR_SYMCRYPT_AUTHENTICATION_FAILURE: SYMCRYPT_ERROR = 32775;
pub const SYMCRYPT_ERROR_SYMCRYPT_EXTERNAL_FAILURE: SYMCRYPT_ERROR = 32776;
pub const SYMCRYPT_ERROR_SYMCRYPT_FIPS_FAILURE: SYMCRYPT_ERROR = 32777;
pub const SYMCRYPT_ERROR_SYMCRYPT_HARDWARE_FAILURE: SYMCRYPT_ERROR = 32778;
pub const SYMCRYPT_ERROR_SYMCRYPT_NOT_IMPLEMENTED: SYMCRYPT_ERROR = 32779;
pub const SYMCRYPT_ERROR_SYMCRYPT_INVALID_BLOB: SYMCRYPT_ERROR = 32780;
pub const SYMCRYPT_ERROR_SYMCRYPT_BUFFER_TOO_SMALL: SYMCRYPT_ERROR = 32781;
pub const SYMCRYPT_ERROR_SYMCRYPT_INVALID_ARGUMENT: SYMCRYPT_ERROR = 32782;
pub const SYMCRYPT_ERROR_SYMCRYPT_MEMORY_ALLOCATION_FAILURE: SYMCRYPT_ERROR = 32783;
pub const SYMCRYPT_ERROR_SYMCRYPT_SIGNATURE_VERIFICATION_FAILURE: SYMCRYPT_ERROR = 32784;
pub const SYMCRYPT_ERROR_SYMCRYPT_INCOMPATIBLE_FORMAT: SYMCRYPT_ERROR = 32785;
pub const SYMCRYPT_ERROR_SYMCRYPT_VALUE_TOO_LARGE: SYMCRYPT_ERROR = 32786;
pub const SYMCRYPT_ERROR_SYMCRYPT_SESSION_REPLAY_FAILURE: SYMCRYPT_ERROR = 32787;
pub type SYMCRYPT_ERROR = ::std::os::raw::c_int;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_NULL: _SYMCRYPT_ECURVE_TYPE = 0;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_SHORT_WEIERSTRASS: _SYMCRYPT_ECURVE_TYPE = 1;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_TWISTED_EDWARDS: _SYMCRYPT_ECURVE_TYPE = 2;
pub const _SYMCRYPT_ECURVE_TYPE_SYMCRYPT_ECURVE_TYPE_MONTGOMERY: _SYMCRYPT_ECURVE_TYPE = 3;
pub type _SYMCRYPT_ECURVE_TYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECURVE_TYPE as SYMCRYPT_ECURVE_TYPE;
pub const _SYMCRYPT_DLGROUP_FIPS_SYMCRYPT_DLGROUP_FIPS_NONE: _SYMCRYPT_DLGROUP_FIPS = 0;
pub const _SYMCRYPT_DLGROUP_FIPS_SYMCRYPT_DLGROUP_FIPS_186_2: _SYMCRYPT_DLGROUP_FIPS = 1;
pub const _SYMCRYPT_DLGROUP_FIPS_SYMCRYPT_DLGROUP_FIPS_186_3: _SYMCRYPT_DLGROUP_FIPS = 2;
pub type _SYMCRYPT_DLGROUP_FIPS = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_DLGROUP_FIPS as SYMCRYPT_DLGROUP_FIPS;
pub const _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_NONE:
    _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE = 0;
pub const _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_IKE_3526:
    _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE = 1;
pub const _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE_TLS_7919:
    _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE = 2;
pub type _SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE as SYMCRYPT_DLGROUP_DH_SAFEPRIMETYPE;
pub type CHAR = ::std::os::raw::c_char;
pub type INT8 = ::std::os::raw::c_schar;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type BYTE = ::std::os::raw::c_uchar;
pub type SHORT = ::std::os::raw::c_short;
pub type INT16 = ::std::os::raw::c_short;
pub type USHORT = ::std::os::raw::c_ushort;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type WORD = ::std::os::raw::c_ushort;
pub type INT = ::std::os::raw::c_int;
pub type INT32 = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT32 = ::std::os::raw::c_uint;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type DWORD = ::std::os::raw::c_ulong;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type LONG64 = ::std::os::raw::c_longlong;
pub type INT64 = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type DWORDLONG = ::std::os::raw::c_ulonglong;
pub type ULONG64 = ::std::os::raw::c_ulonglong;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type INT_PTR = ::std::os::raw::c_longlong;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type DWORD_PTR = ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type SIZE_T = ULONG_PTR;
pub type HRESULT = ::std::os::raw::c_long;
pub type __C_ASSERT__ = [::std::os::raw::c_char; 1usize];
pub type va_list = *mut ::std::os::raw::c_char;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type __crt_bool = bool;
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type PBYTE = *mut BYTE;
pub type PCBYTE = *const BYTE;
pub type PUINT16 = *mut UINT16;
pub type PCUINT16 = *const UINT16;
pub type PUINT32 = *mut UINT32;
pub type PCUINT32 = *const UINT32;
pub type PUINT64 = *mut UINT64;
pub type PCUINT64 = *const UINT64;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type PCVOID = *const ::std::os::raw::c_void;
pub type BOOLEAN = BYTE;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __m64 {
    pub m64_u64: ::std::os::raw::c_ulonglong,
    pub m64_f32: [f32; 2usize],
    pub m64_i8: [::std::os::raw::c_char; 8usize],
    pub m64_i16: [::std::os::raw::c_short; 4usize],
    pub m64_i32: [::std::os::raw::c_int; 2usize],
    pub m64_i64: ::std::os::raw::c_longlong,
    pub m64_u8: [::std::os::raw::c_uchar; 8usize],
    pub m64_u16: [::std::os::raw::c_ushort; 4usize],
    pub m64_u32: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m64"][::std::mem::size_of::<__m64>() - 8usize];
    ["Alignment of __m64"][::std::mem::align_of::<__m64>() - 8usize];
    ["Offset of field: __m64::m64_u64"][::std::mem::offset_of!(__m64, m64_u64) - 0usize];
    ["Offset of field: __m64::m64_f32"][::std::mem::offset_of!(__m64, m64_f32) - 0usize];
    ["Offset of field: __m64::m64_i8"][::std::mem::offset_of!(__m64, m64_i8) - 0usize];
    ["Offset of field: __m64::m64_i16"][::std::mem::offset_of!(__m64, m64_i16) - 0usize];
    ["Offset of field: __m64::m64_i32"][::std::mem::offset_of!(__m64, m64_i32) - 0usize];
    ["Offset of field: __m64::m64_i64"][::std::mem::offset_of!(__m64, m64_i64) - 0usize];
    ["Offset of field: __m64::m64_u8"][::std::mem::offset_of!(__m64, m64_u8) - 0usize];
    ["Offset of field: __m64::m64_u16"][::std::mem::offset_of!(__m64, m64_u16) - 0usize];
    ["Offset of field: __m64::m64_u32"][::std::mem::offset_of!(__m64, m64_u32) - 0usize];
};
impl Default for __m64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128 {
    pub m128_f32: [f32; 4usize],
    pub m128_u64: [::std::os::raw::c_ulonglong; 2usize],
    pub m128_i8: [::std::os::raw::c_char; 16usize],
    pub m128_i16: [::std::os::raw::c_short; 8usize],
    pub m128_i32: [::std::os::raw::c_int; 4usize],
    pub m128_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128_u32: [::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128"][::std::mem::size_of::<__m128>() - 16usize];
    ["Alignment of __m128"][::std::mem::align_of::<__m128>() - 16usize];
    ["Offset of field: __m128::m128_f32"][::std::mem::offset_of!(__m128, m128_f32) - 0usize];
    ["Offset of field: __m128::m128_u64"][::std::mem::offset_of!(__m128, m128_u64) - 0usize];
    ["Offset of field: __m128::m128_i8"][::std::mem::offset_of!(__m128, m128_i8) - 0usize];
    ["Offset of field: __m128::m128_i16"][::std::mem::offset_of!(__m128, m128_i16) - 0usize];
    ["Offset of field: __m128::m128_i32"][::std::mem::offset_of!(__m128, m128_i32) - 0usize];
    ["Offset of field: __m128::m128_i64"][::std::mem::offset_of!(__m128, m128_i64) - 0usize];
    ["Offset of field: __m128::m128_u8"][::std::mem::offset_of!(__m128, m128_u8) - 0usize];
    ["Offset of field: __m128::m128_u16"][::std::mem::offset_of!(__m128, m128_u16) - 0usize];
    ["Offset of field: __m128::m128_u32"][::std::mem::offset_of!(__m128, m128_u32) - 0usize];
};
impl Default for __m128 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: usize,
    pub _useflag: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _heapinfo"][::std::mem::size_of::<_heapinfo>() - 24usize];
    ["Alignment of _heapinfo"][::std::mem::align_of::<_heapinfo>() - 8usize];
    ["Offset of field: _heapinfo::_pentry"][::std::mem::offset_of!(_heapinfo, _pentry) - 0usize];
    ["Offset of field: _heapinfo::_size"][::std::mem::offset_of!(_heapinfo, _size) - 8usize];
    ["Offset of field: _heapinfo::_useflag"][::std::mem::offset_of!(_heapinfo, _useflag) - 16usize];
};
impl Default for _heapinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _HEAPINFO = _heapinfo;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128i {
    pub m128i_i8: [::std::os::raw::c_char; 16usize],
    pub m128i_i16: [::std::os::raw::c_short; 8usize],
    pub m128i_i32: [::std::os::raw::c_int; 4usize],
    pub m128i_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128i_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128i_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128i_u32: [::std::os::raw::c_uint; 4usize],
    pub m128i_u64: [::std::os::raw::c_ulonglong; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128i"][::std::mem::size_of::<__m128i>() - 16usize];
    ["Alignment of __m128i"][::std::mem::align_of::<__m128i>() - 16usize];
    ["Offset of field: __m128i::m128i_i8"][::std::mem::offset_of!(__m128i, m128i_i8) - 0usize];
    ["Offset of field: __m128i::m128i_i16"][::std::mem::offset_of!(__m128i, m128i_i16) - 0usize];
    ["Offset of field: __m128i::m128i_i32"][::std::mem::offset_of!(__m128i, m128i_i32) - 0usize];
    ["Offset of field: __m128i::m128i_i64"][::std::mem::offset_of!(__m128i, m128i_i64) - 0usize];
    ["Offset of field: __m128i::m128i_u8"][::std::mem::offset_of!(__m128i, m128i_u8) - 0usize];
    ["Offset of field: __m128i::m128i_u16"][::std::mem::offset_of!(__m128i, m128i_u16) - 0usize];
    ["Offset of field: __m128i::m128i_u32"][::std::mem::offset_of!(__m128i, m128i_u32) - 0usize];
    ["Offset of field: __m128i::m128i_u64"][::std::mem::offset_of!(__m128i, m128i_u64) - 0usize];
};
impl Default for __m128i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __m128d {
    pub m128d_f64: [f64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __m128d"][::std::mem::size_of::<__m128d>() - 16usize];
    ["Alignment of __m128d"][::std::mem::align_of::<__m128d>() - 16usize];
    ["Offset of field: __m128d::m128d_f64"][::std::mem::offset_of!(__m128d, m128d_f64) - 0usize];
};
pub type SYMCRYPT_CPU_FEATURES = UINT32;
pub type SYMCRYPT_BLOCKCIPHER = _SYMCRYPT_BLOCKCIPHER;
pub type PSYMCRYPT_BLOCKCIPHER = *mut _SYMCRYPT_BLOCKCIPHER;
pub type PCSYMCRYPT_BLOCKCIPHER = *const SYMCRYPT_BLOCKCIPHER;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_COMMON_HASH_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_COMMON_HASH_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_COMMON_HASH_STATE>() - 48usize];
    ["Alignment of _SYMCRYPT_COMMON_HASH_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_COMMON_HASH_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_COMMON_HASH_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_COMMON_HASH_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_COMMON_HASH_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_COMMON_HASH_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_COMMON_HASH_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_COMMON_HASH_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_COMMON_HASH_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_COMMON_HASH_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_COMMON_HASH_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_COMMON_HASH_STATE, buffer) - 32usize];
};
pub type SYMCRYPT_COMMON_HASH_STATE = _SYMCRYPT_COMMON_HASH_STATE;
pub type PSYMCRYPT_COMMON_HASH_STATE = *mut _SYMCRYPT_COMMON_HASH_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MD2_CHAINING_STATE {
    pub C: [BYTE; 16usize],
    pub X: [BYTE; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD2_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_MD2_CHAINING_STATE>() - 64usize];
    ["Alignment of _SYMCRYPT_MD2_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_MD2_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD2_CHAINING_STATE::C"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_CHAINING_STATE, C) - 0usize];
    ["Offset of field: _SYMCRYPT_MD2_CHAINING_STATE::X"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_CHAINING_STATE, X) - 16usize];
};
impl Default for _SYMCRYPT_MD2_CHAINING_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MD2_CHAINING_STATE = _SYMCRYPT_MD2_CHAINING_STATE;
pub type PSYMCRYPT_MD2_CHAINING_STATE = *mut _SYMCRYPT_MD2_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MD2_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 16usize],
    pub chain: SYMCRYPT_MD2_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD2_STATE"][::std::mem::size_of::<_SYMCRYPT_MD2_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_MD2_STATE"][::std::mem::align_of::<_SYMCRYPT_MD2_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_MD2_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_MD2_STATE, chain) - 48usize];
};
impl Default for _SYMCRYPT_MD2_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MD2_STATE = _SYMCRYPT_MD2_STATE;
pub type PSYMCRYPT_MD2_STATE = *mut _SYMCRYPT_MD2_STATE;
pub type PCSYMCRYPT_MD2_STATE = *const SYMCRYPT_MD2_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MD4_CHAINING_STATE {
    pub H: [UINT32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD4_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_MD4_CHAINING_STATE>() - 16usize];
    ["Alignment of _SYMCRYPT_MD4_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_MD4_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD4_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_MD4_CHAINING_STATE = _SYMCRYPT_MD4_CHAINING_STATE;
pub type PSYMCRYPT_MD4_CHAINING_STATE = *mut _SYMCRYPT_MD4_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MD4_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_MD4_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD4_STATE"][::std::mem::size_of::<_SYMCRYPT_MD4_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_MD4_STATE"][::std::mem::align_of::<_SYMCRYPT_MD4_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_MD4_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_MD4_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_MD4_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MD4_STATE = _SYMCRYPT_MD4_STATE;
pub type PSYMCRYPT_MD4_STATE = *mut _SYMCRYPT_MD4_STATE;
pub type PCSYMCRYPT_MD4_STATE = *const SYMCRYPT_MD4_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MD5_CHAINING_STATE {
    pub H: [UINT32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD5_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_MD5_CHAINING_STATE>() - 16usize];
    ["Alignment of _SYMCRYPT_MD5_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_MD5_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_MD5_CHAINING_STATE = _SYMCRYPT_MD5_CHAINING_STATE;
pub type PSYMCRYPT_MD5_CHAINING_STATE = *mut _SYMCRYPT_MD5_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MD5_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_MD5_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MD5_STATE"][::std::mem::size_of::<_SYMCRYPT_MD5_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_MD5_STATE"][::std::mem::align_of::<_SYMCRYPT_MD5_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_MD5_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_MD5_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_MD5_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MD5_STATE = _SYMCRYPT_MD5_STATE;
pub type PSYMCRYPT_MD5_STATE = *mut _SYMCRYPT_MD5_STATE;
pub type PCSYMCRYPT_MD5_STATE = *const SYMCRYPT_MD5_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA1_CHAINING_STATE {
    pub H: [UINT32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA1_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA1_CHAINING_STATE>() - 32usize];
    ["Alignment of _SYMCRYPT_SHA1_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA1_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA1_CHAINING_STATE = _SYMCRYPT_SHA1_CHAINING_STATE;
pub type PSYMCRYPT_SHA1_CHAINING_STATE = *mut _SYMCRYPT_SHA1_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA1_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_SHA1_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA1_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA1_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_SHA1_STATE"][::std::mem::align_of::<_SYMCRYPT_SHA1_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA1_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA1_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_SHA1_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA1_STATE = _SYMCRYPT_SHA1_STATE;
pub type PSYMCRYPT_SHA1_STATE = *mut _SYMCRYPT_SHA1_STATE;
pub type PCSYMCRYPT_SHA1_STATE = *const SYMCRYPT_SHA1_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA256_CHAINING_STATE {
    pub H: [UINT32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA256_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA256_CHAINING_STATE>() - 32usize];
    ["Alignment of _SYMCRYPT_SHA256_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA256_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA256_CHAINING_STATE = _SYMCRYPT_SHA256_CHAINING_STATE;
pub type PSYMCRYPT_SHA256_CHAINING_STATE = *mut _SYMCRYPT_SHA256_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA256_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 64usize],
    pub chain: SYMCRYPT_SHA256_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA256_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA256_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_SHA256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA256_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA256_STATE, chain) - 96usize];
};
impl Default for _SYMCRYPT_SHA256_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA256_STATE = _SYMCRYPT_SHA256_STATE;
pub type PSYMCRYPT_SHA256_STATE = *mut _SYMCRYPT_SHA256_STATE;
pub type PCSYMCRYPT_SHA256_STATE = *const SYMCRYPT_SHA256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA512_CHAINING_STATE {
    pub H: [UINT64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA512_CHAINING_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA512_CHAINING_STATE>() - 64usize];
    ["Alignment of _SYMCRYPT_SHA512_CHAINING_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA512_CHAINING_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_CHAINING_STATE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_CHAINING_STATE, H) - 0usize];
};
pub type SYMCRYPT_SHA512_CHAINING_STATE = _SYMCRYPT_SHA512_CHAINING_STATE;
pub type PSYMCRYPT_SHA512_CHAINING_STATE = *mut _SYMCRYPT_SHA512_CHAINING_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA512_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 128usize],
    pub chain: SYMCRYPT_SHA512_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA512_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA512_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_SHA512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA512_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA512_STATE, chain) - 160usize];
};
impl Default for _SYMCRYPT_SHA512_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA512_STATE = _SYMCRYPT_SHA512_STATE;
pub type PSYMCRYPT_SHA512_STATE = *mut _SYMCRYPT_SHA512_STATE;
pub type PCSYMCRYPT_SHA512_STATE = *const SYMCRYPT_SHA512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SHA384_STATE {
    pub bytesInBuffer: UINT32,
    pub magic: SIZE_T,
    pub dataLengthL: UINT64,
    pub dataLengthH: UINT64,
    pub buffer: [BYTE; 128usize],
    pub chain: SYMCRYPT_SHA512_CHAINING_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA384_STATE"][::std::mem::size_of::<_SYMCRYPT_SHA384_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_SHA384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, bytesInBuffer) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, magic) - 8usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::dataLengthL"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, dataLengthL) - 16usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::dataLengthH"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, dataLengthH) - 24usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, buffer) - 32usize];
    ["Offset of field: _SYMCRYPT_SHA384_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA384_STATE, chain) - 160usize];
};
impl Default for _SYMCRYPT_SHA384_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SHA384_STATE = _SYMCRYPT_SHA384_STATE;
pub type PSYMCRYPT_SHA384_STATE = *mut _SYMCRYPT_SHA384_STATE;
pub type PCSYMCRYPT_SHA384_STATE = *const SYMCRYPT_SHA384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KECCAK_STATE {
    pub state: [UINT64; 25usize],
    pub inputBlockSize: UINT32,
    pub stateIndex: UINT32,
    pub paddingValue: UINT8,
    pub squeezeMode: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KECCAK_STATE"][::std::mem::size_of::<_SYMCRYPT_KECCAK_STATE>() - 224usize];
    ["Alignment of _SYMCRYPT_KECCAK_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_KECCAK_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::state"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, state) - 0usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::inputBlockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, inputBlockSize) - 200usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::stateIndex"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, stateIndex) - 204usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::paddingValue"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, paddingValue) - 208usize];
    ["Offset of field: _SYMCRYPT_KECCAK_STATE::squeezeMode"]
        [::std::mem::offset_of!(_SYMCRYPT_KECCAK_STATE, squeezeMode) - 209usize];
};
pub type SYMCRYPT_KECCAK_STATE = _SYMCRYPT_KECCAK_STATE;
pub type PSYMCRYPT_KECCAK_STATE = *mut _SYMCRYPT_KECCAK_STATE;
pub type PCSYMCRYPT_KECCAK_STATE = *const SYMCRYPT_KECCAK_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_256_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_256_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_256_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_256_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_256_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_256_STATE = _SYMCRYPT_SHA3_256_STATE;
pub type PSYMCRYPT_SHA3_256_STATE = *mut _SYMCRYPT_SHA3_256_STATE;
pub type PCSYMCRYPT_SHA3_256_STATE = *const SYMCRYPT_SHA3_256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_384_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_384_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_384_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_384_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_384_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_384_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_384_STATE = _SYMCRYPT_SHA3_384_STATE;
pub type PSYMCRYPT_SHA3_384_STATE = *mut _SYMCRYPT_SHA3_384_STATE;
pub type PCSYMCRYPT_SHA3_384_STATE = *const SYMCRYPT_SHA3_384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHA3_512_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHA3_512_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHA3_512_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHA3_512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHA3_512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHA3_512_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_512_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHA3_512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHA3_512_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHA3_512_STATE = _SYMCRYPT_SHA3_512_STATE;
pub type PSYMCRYPT_SHA3_512_STATE = *mut _SYMCRYPT_SHA3_512_STATE;
pub type PCSYMCRYPT_SHA3_512_STATE = *const SYMCRYPT_SHA3_512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHAKE128_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHAKE128_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHAKE128_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHAKE128_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHAKE128_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHAKE128_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHAKE128_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHAKE128_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHAKE128_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHAKE128_STATE = _SYMCRYPT_SHAKE128_STATE;
pub type PSYMCRYPT_SHAKE128_STATE = *mut _SYMCRYPT_SHAKE128_STATE;
pub type PCSYMCRYPT_SHAKE128_STATE = *const SYMCRYPT_SHAKE128_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SHAKE256_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SHAKE256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SHAKE256_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_SHAKE256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SHAKE256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SHAKE256_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_SHAKE256_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_SHAKE256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_SHAKE256_STATE, magic) - 224usize];
};
pub type SYMCRYPT_SHAKE256_STATE = _SYMCRYPT_SHAKE256_STATE;
pub type PSYMCRYPT_SHAKE256_STATE = *mut _SYMCRYPT_SHAKE256_STATE;
pub type PCSYMCRYPT_SHAKE256_STATE = *const SYMCRYPT_SHAKE256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_CSHAKE128_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_CSHAKE128_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_CSHAKE128_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_CSHAKE128_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_CSHAKE128_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_CSHAKE128_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_CSHAKE128_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_CSHAKE128_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_CSHAKE128_STATE, magic) - 224usize];
};
pub type SYMCRYPT_CSHAKE128_STATE = _SYMCRYPT_CSHAKE128_STATE;
pub type PSYMCRYPT_CSHAKE128_STATE = *mut _SYMCRYPT_CSHAKE128_STATE;
pub type PCSYMCRYPT_CSHAKE128_STATE = *const SYMCRYPT_CSHAKE128_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_CSHAKE256_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_CSHAKE256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_CSHAKE256_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_CSHAKE256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_CSHAKE256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_CSHAKE256_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_CSHAKE256_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_CSHAKE256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_CSHAKE256_STATE, magic) - 224usize];
};
pub type SYMCRYPT_CSHAKE256_STATE = _SYMCRYPT_CSHAKE256_STATE;
pub type PSYMCRYPT_CSHAKE256_STATE = *mut _SYMCRYPT_CSHAKE256_STATE;
pub type PCSYMCRYPT_CSHAKE256_STATE = *const SYMCRYPT_CSHAKE256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KMAC128_EXPANDED_KEY {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KMAC128_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_KMAC128_EXPANDED_KEY>() - 240usize];
    ["Alignment of _SYMCRYPT_KMAC128_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_KMAC128_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_KMAC128_EXPANDED_KEY::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC128_EXPANDED_KEY, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_KMAC128_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC128_EXPANDED_KEY, magic) - 224usize];
};
pub type SYMCRYPT_KMAC128_EXPANDED_KEY = _SYMCRYPT_KMAC128_EXPANDED_KEY;
pub type PSYMCRYPT_KMAC128_EXPANDED_KEY = *mut _SYMCRYPT_KMAC128_EXPANDED_KEY;
pub type PCSYMCRYPT_KMAC128_EXPANDED_KEY = *const SYMCRYPT_KMAC128_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KMAC128_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KMAC128_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_KMAC128_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_KMAC128_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_KMAC128_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_KMAC128_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC128_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_KMAC128_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC128_STATE, magic) - 224usize];
};
pub type SYMCRYPT_KMAC128_STATE = _SYMCRYPT_KMAC128_STATE;
pub type PSYMCRYPT_KMAC128_STATE = *mut _SYMCRYPT_KMAC128_STATE;
pub type PCSYMCRYPT_KMAC128_STATE = *const SYMCRYPT_KMAC128_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KMAC256_EXPANDED_KEY {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KMAC256_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_KMAC256_EXPANDED_KEY>() - 240usize];
    ["Alignment of _SYMCRYPT_KMAC256_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_KMAC256_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_KMAC256_EXPANDED_KEY::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC256_EXPANDED_KEY, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_KMAC256_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC256_EXPANDED_KEY, magic) - 224usize];
};
pub type SYMCRYPT_KMAC256_EXPANDED_KEY = _SYMCRYPT_KMAC256_EXPANDED_KEY;
pub type PSYMCRYPT_KMAC256_EXPANDED_KEY = *mut _SYMCRYPT_KMAC256_EXPANDED_KEY;
pub type PCSYMCRYPT_KMAC256_EXPANDED_KEY = *const SYMCRYPT_KMAC256_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_KMAC256_STATE {
    pub ks: SYMCRYPT_KECCAK_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_KMAC256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_KMAC256_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_KMAC256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_KMAC256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_KMAC256_STATE::ks"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC256_STATE, ks) - 0usize];
    ["Offset of field: _SYMCRYPT_KMAC256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_KMAC256_STATE, magic) - 224usize];
};
pub type SYMCRYPT_KMAC256_STATE = _SYMCRYPT_KMAC256_STATE;
pub type PSYMCRYPT_KMAC256_STATE = *mut _SYMCRYPT_KMAC256_STATE;
pub type PCSYMCRYPT_KMAC256_STATE = *const SYMCRYPT_KMAC256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_HASH_STATE {
    pub md2State: SYMCRYPT_MD2_STATE,
    pub md4State: SYMCRYPT_MD4_STATE,
    pub md5State: SYMCRYPT_MD5_STATE,
    pub sha1State: SYMCRYPT_SHA1_STATE,
    pub sha256State: SYMCRYPT_SHA256_STATE,
    pub sha384State: SYMCRYPT_SHA384_STATE,
    pub sha512State: SYMCRYPT_SHA512_STATE,
    pub sha3_256State: SYMCRYPT_SHA3_256_STATE,
    pub sha3_384State: SYMCRYPT_SHA3_384_STATE,
    pub sha3_512State: SYMCRYPT_SHA3_512_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HASH_STATE"][::std::mem::size_of::<_SYMCRYPT_HASH_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_HASH_STATE"][::std::mem::align_of::<_SYMCRYPT_HASH_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::md2State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, md2State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::md4State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, md4State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::md5State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, md5State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha1State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha1State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha256State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha256State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha384State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha384State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha512State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha512State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha3_256State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha3_256State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha3_384State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha3_384State) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH_STATE::sha3_512State"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH_STATE, sha3_512State) - 0usize];
};
impl Default for _SYMCRYPT_HASH_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HASH_STATE = _SYMCRYPT_HASH_STATE;
pub type PSYMCRYPT_HASH_STATE = *mut _SYMCRYPT_HASH_STATE;
pub type PCSYMCRYPT_HASH_STATE = *const SYMCRYPT_HASH_STATE;
pub type SYMCRYPT_HASH = _SYMCRYPT_HASH;
pub type PSYMCRYPT_HASH = *mut _SYMCRYPT_HASH;
pub type PCSYMCRYPT_HASH = *const SYMCRYPT_HASH;
pub type SYMCRYPT_PARALLEL_HASH = _SYMCRYPT_PARALLEL_HASH;
pub type PSYMCRYPT_PARALLEL_HASH = *mut _SYMCRYPT_PARALLEL_HASH;
pub type PCSYMCRYPT_PARALLEL_HASH = *const SYMCRYPT_PARALLEL_HASH;
pub type PSYMCRYPT_HASH_INIT_FUNC = ::std::option::Option<unsafe extern "C" fn(pState: PVOID)>;
pub type PSYMCRYPT_HASH_APPEND_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbData: PCBYTE, cbData: SIZE_T)>;
pub type PSYMCRYPT_HASH_RESULT_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbResult: PVOID)>;
pub type PSYMCRYPT_HASH_APPEND_BLOCKS_FUNC = ::std::option::Option<
    unsafe extern "C" fn(pChain: PVOID, pbData: PCBYTE, cbData: SIZE_T, pcbRemaining: *mut SIZE_T),
>;
pub type PSYMCRYPT_HASH_STATE_COPY_FUNC =
    ::std::option::Option<unsafe extern "C" fn(pStateSrc: PCVOID, pStateDst: PVOID)>;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HASH {
    pub initFunc: PSYMCRYPT_HASH_INIT_FUNC,
    pub appendFunc: PSYMCRYPT_HASH_APPEND_FUNC,
    pub resultFunc: PSYMCRYPT_HASH_RESULT_FUNC,
    pub appendBlockFunc: PSYMCRYPT_HASH_APPEND_BLOCKS_FUNC,
    pub stateCopyFunc: PSYMCRYPT_HASH_STATE_COPY_FUNC,
    pub stateSize: UINT32,
    pub resultSize: UINT32,
    pub inputBlockSize: UINT32,
    pub chainOffset: UINT32,
    pub chainSize: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HASH"][::std::mem::size_of::<_SYMCRYPT_HASH>() - 64usize];
    ["Alignment of _SYMCRYPT_HASH"][::std::mem::align_of::<_SYMCRYPT_HASH>() - 16usize];
    ["Offset of field: _SYMCRYPT_HASH::initFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, initFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_HASH::appendFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, appendFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_HASH::resultFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, resultFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_HASH::appendBlockFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, appendBlockFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_HASH::stateCopyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, stateCopyFunc) - 32usize];
    ["Offset of field: _SYMCRYPT_HASH::stateSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, stateSize) - 40usize];
    ["Offset of field: _SYMCRYPT_HASH::resultSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, resultSize) - 44usize];
    ["Offset of field: _SYMCRYPT_HASH::inputBlockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, inputBlockSize) - 48usize];
    ["Offset of field: _SYMCRYPT_HASH::chainOffset"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, chainOffset) - 52usize];
    ["Offset of field: _SYMCRYPT_HASH::chainSize"]
        [::std::mem::offset_of!(_SYMCRYPT_HASH, chainSize) - 56usize];
};
pub const _SYMCRYPT_HASH_OPERATION_TYPE_SYMCRYPT_HASH_OPERATION_APPEND:
    _SYMCRYPT_HASH_OPERATION_TYPE = 1;
pub const _SYMCRYPT_HASH_OPERATION_TYPE_SYMCRYPT_HASH_OPERATION_RESULT:
    _SYMCRYPT_HASH_OPERATION_TYPE = 2;
pub type _SYMCRYPT_HASH_OPERATION_TYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_HASH_OPERATION_TYPE as SYMCRYPT_HASH_OPERATION_TYPE;
pub type SYMCRYPT_PARALLEL_HASH_OPERATION = _SYMCRYPT_PARALLEL_HASH_OPERATION;
pub type PSYMCRYPT_PARALLEL_HASH_OPERATION = *mut _SYMCRYPT_PARALLEL_HASH_OPERATION;
pub type PCSYMRYPT_PARALLEL_HASH_OPERATION = *const SYMCRYPT_PARALLEL_HASH_OPERATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_PARALLEL_HASH_OPERATION {
    pub iHash: SIZE_T,
    pub hashOperation: SYMCRYPT_HASH_OPERATION_TYPE,
    pub pbBuffer: PBYTE,
    pub cbBuffer: SIZE_T,
    pub next: PSYMCRYPT_PARALLEL_HASH_OPERATION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_PARALLEL_HASH_OPERATION"]
        [::std::mem::size_of::<_SYMCRYPT_PARALLEL_HASH_OPERATION>() - 40usize];
    ["Alignment of _SYMCRYPT_PARALLEL_HASH_OPERATION"]
        [::std::mem::align_of::<_SYMCRYPT_PARALLEL_HASH_OPERATION>() - 8usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_OPERATION::iHash"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_OPERATION, iHash) - 0usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_OPERATION::hashOperation"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_OPERATION, hashOperation) - 8usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_OPERATION::pbBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_OPERATION, pbBuffer) - 16usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_OPERATION::cbBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_OPERATION, cbBuffer) - 24usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_OPERATION::next"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_OPERATION, next) - 32usize];
};
impl Default for _SYMCRYPT_PARALLEL_HASH_OPERATION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_PARALLEL_HASH_SCRATCH_OPERATION {
    _unused: [u8; 0],
}
pub type SYMCRYPT_PARALLEL_HASH_SCRATCH_OPERATION = _SYMCRYPT_PARALLEL_HASH_SCRATCH_OPERATION;
pub type PSYMCRYPT_PARALLEL_HASH_SCRATCH_OPERATION = *mut _SYMCRYPT_PARALLEL_HASH_SCRATCH_OPERATION;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE {
    pub hashState: PVOID,
    pub processingState: BYTE,
    pub bytesAlreadyProcessed: BYTE,
    pub bytes: UINT64,
    pub next: PSYMCRYPT_PARALLEL_HASH_OPERATION,
    pub pbData: PCBYTE,
    pub cbData: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE>() - 48usize];
    ["Alignment of _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::hashState"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, hashState) - 0usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::processingState"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, processingState) - 8usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::bytesAlreadyProcessed"][::std::mem::offset_of!(
        _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE,
        bytesAlreadyProcessed
    ) - 9usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::bytes"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, bytes) - 16usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::next"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, next) - 24usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::pbData"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, pbData) - 32usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE::cbData"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE, cbData) - 40usize];
};
impl Default for _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE = _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE;
pub type PSYMCRYPT_PARALLEL_HASH_SCRATCH_STATE = *mut _SYMCRYPT_PARALLEL_HASH_SCRATCH_STATE;
pub type PSYMCRYPT_PARALLEL_HASH_RESULT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        pParHash: PCSYMCRYPT_PARALLEL_HASH,
        pState: PSYMCRYPT_COMMON_HASH_STATE,
        pScratch: PSYMCRYPT_PARALLEL_HASH_SCRATCH_STATE,
        pRes: *mut BOOLEAN,
    ) -> BOOLEAN,
>;
pub type PSYMCRYPT_PARALLEL_HASH_RESULT_DONE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        pParHash: PCSYMCRYPT_PARALLEL_HASH,
        pState: PSYMCRYPT_COMMON_HASH_STATE,
        pOp: PCSYMRYPT_PARALLEL_HASH_OPERATION,
    ),
>;
pub type PSYMCRYPT_PARALLEL_APPEND_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        pWork: *mut PSYMCRYPT_PARALLEL_HASH_SCRATCH_STATE,
        nPar: SIZE_T,
        nBytes: SIZE_T,
        pbSimdScratch: PBYTE,
        cbSimdScratch: SIZE_T,
    ),
>;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_PARALLEL_HASH {
    pub pHash: PCSYMCRYPT_HASH,
    pub parScratchFixed: UINT32,
    pub parResult1Func: PSYMCRYPT_PARALLEL_HASH_RESULT_FUNC,
    pub parResult2Func: PSYMCRYPT_PARALLEL_HASH_RESULT_FUNC,
    pub parResultDoneFunc: PSYMCRYPT_PARALLEL_HASH_RESULT_DONE_FUNC,
    pub parAppendFunc: PSYMCRYPT_PARALLEL_APPEND_FUNC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_PARALLEL_HASH"][::std::mem::size_of::<_SYMCRYPT_PARALLEL_HASH>() - 48usize];
    ["Alignment of _SYMCRYPT_PARALLEL_HASH"]
        [::std::mem::align_of::<_SYMCRYPT_PARALLEL_HASH>() - 16usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::pHash"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, pHash) - 0usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::parScratchFixed"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, parScratchFixed) - 8usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::parResult1Func"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, parResult1Func) - 16usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::parResult2Func"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, parResult2Func) - 24usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::parResultDoneFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, parResultDoneFunc) - 32usize];
    ["Offset of field: _SYMCRYPT_PARALLEL_HASH::parAppendFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_PARALLEL_HASH, parAppendFunc) - 40usize];
};
impl Default for _SYMCRYPT_PARALLEL_HASH {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_MD5_EXPANDED_KEY {
    pub innerState: SYMCRYPT_MD5_CHAINING_STATE,
    pub outerState: SYMCRYPT_MD5_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_MD5_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_MD5_EXPANDED_KEY>() - 48usize];
    ["Alignment of _SYMCRYPT_HMAC_MD5_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_MD5_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, outerState) - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_EXPANDED_KEY, magic) - 32usize];
};
pub type SYMCRYPT_HMAC_MD5_EXPANDED_KEY = _SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_MD5_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY = *const SYMCRYPT_HMAC_MD5_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_MD5_STATE {
    pub hash: SYMCRYPT_MD5_STATE,
    pub pKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_MD5_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_MD5_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_HMAC_MD5_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_MD5_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, pKey) - 112usize];
    ["Offset of field: _SYMCRYPT_HMAC_MD5_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_MD5_STATE, magic) - 120usize];
};
impl Default for _SYMCRYPT_HMAC_MD5_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_MD5_STATE = _SYMCRYPT_HMAC_MD5_STATE;
pub type PSYMCRYPT_HMAC_MD5_STATE = *mut _SYMCRYPT_HMAC_MD5_STATE;
pub type PCSYMCRYPT_HMAC_MD5_STATE = *const SYMCRYPT_HMAC_MD5_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA1_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA1_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY>() - 80usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, outerState) - 32usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_EXPANDED_KEY, magic) - 64usize];
};
pub type SYMCRYPT_HMAC_SHA1_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA1_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA1_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA1_STATE {
    pub hash: SYMCRYPT_SHA1_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA1_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA1_STATE>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA1_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA1_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, pKey) - 128usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA1_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA1_STATE, magic) - 136usize];
};
impl Default for _SYMCRYPT_HMAC_SHA1_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA1_STATE = _SYMCRYPT_HMAC_SHA1_STATE;
pub type PSYMCRYPT_HMAC_SHA1_STATE = *mut _SYMCRYPT_HMAC_SHA1_STATE;
pub type PCSYMCRYPT_HMAC_SHA1_STATE = *const SYMCRYPT_HMAC_SHA1_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA256_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA256_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY>() - 80usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, outerState) - 32usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_EXPANDED_KEY, magic) - 64usize];
};
pub type SYMCRYPT_HMAC_SHA256_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA256_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA256_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA256_STATE {
    pub hash: SYMCRYPT_SHA256_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA256_STATE>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, pKey) - 128usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA256_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA256_STATE, magic) - 136usize];
};
impl Default for _SYMCRYPT_HMAC_SHA256_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA256_STATE = _SYMCRYPT_HMAC_SHA256_STATE;
pub type PSYMCRYPT_HMAC_SHA256_STATE = *mut _SYMCRYPT_HMAC_SHA256_STATE;
pub type PCSYMCRYPT_HMAC_SHA256_STATE = *const SYMCRYPT_HMAC_SHA256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, outerState) - 64usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_EXPANDED_KEY, magic) - 128usize];
};
pub type SYMCRYPT_HMAC_SHA384_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA384_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA384_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA384_STATE {
    pub hash: SYMCRYPT_SHA384_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA384_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA384_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, pKey) - 224usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA384_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA384_STATE, magic) - 232usize];
};
impl Default for _SYMCRYPT_HMAC_SHA384_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA384_STATE = _SYMCRYPT_HMAC_SHA384_STATE;
pub type PSYMCRYPT_HMAC_SHA384_STATE = *mut _SYMCRYPT_HMAC_SHA384_STATE;
pub type PCSYMCRYPT_HMAC_SHA384_STATE = *const SYMCRYPT_HMAC_SHA384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY {
    pub innerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub outerState: SYMCRYPT_SHA512_CHAINING_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY>() - 144usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, innerState) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, outerState) - 64usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_EXPANDED_KEY, magic) - 128usize];
};
pub type SYMCRYPT_HMAC_SHA512_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA512_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA512_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA512_STATE {
    pub hash: SYMCRYPT_SHA512_STATE,
    pub pKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA512_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA512_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, hash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, pKey) - 224usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA512_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA512_STATE, magic) - 232usize];
};
impl Default for _SYMCRYPT_HMAC_SHA512_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA512_STATE = _SYMCRYPT_HMAC_SHA512_STATE;
pub type PSYMCRYPT_HMAC_SHA512_STATE = *mut _SYMCRYPT_HMAC_SHA512_STATE;
pub type PCSYMCRYPT_HMAC_SHA512_STATE = *const SYMCRYPT_HMAC_SHA512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_EXPANDED_KEY {
    pub pHash: PCSYMCRYPT_HASH,
    pub __bindgen_padding_0: u64,
    pub innerState: SYMCRYPT_HASH_STATE,
    pub outerState: SYMCRYPT_HASH_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_EXPANDED_KEY>() - 512usize];
    ["Alignment of _SYMCRYPT_HMAC_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_EXPANDED_KEY::pHash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_EXPANDED_KEY, pHash) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_EXPANDED_KEY::innerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_EXPANDED_KEY, innerState) - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_EXPANDED_KEY::outerState"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_EXPANDED_KEY, outerState) - 256usize];
    ["Offset of field: _SYMCRYPT_HMAC_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_EXPANDED_KEY, magic) - 496usize];
};
impl Default for _SYMCRYPT_HMAC_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_EXPANDED_KEY = _SYMCRYPT_HMAC_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_EXPANDED_KEY = *const SYMCRYPT_HMAC_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_STATE {
    pub pKey: PCSYMCRYPT_HMAC_EXPANDED_KEY,
    pub __bindgen_padding_0: u64,
    pub hash: SYMCRYPT_HASH_STATE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_STATE"][::std::mem::size_of::<_SYMCRYPT_HMAC_STATE>() - 272usize];
    ["Alignment of _SYMCRYPT_HMAC_STATE"][::std::mem::align_of::<_SYMCRYPT_HMAC_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_STATE, pKey) - 0usize];
    ["Offset of field: _SYMCRYPT_HMAC_STATE::hash"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_STATE, hash) - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_STATE, magic) - 256usize];
};
impl Default for _SYMCRYPT_HMAC_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_STATE = _SYMCRYPT_HMAC_STATE;
pub type PSYMCRYPT_HMAC_STATE = *mut _SYMCRYPT_HMAC_STATE;
pub type PCSYMCRYPT_HMAC_STATE = *const SYMCRYPT_HMAC_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY {
    pub generic: SYMCRYPT_HMAC_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY>() - 512usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA3_256_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_256_STATE {
    pub generic: SYMCRYPT_HMAC_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_256_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_256_STATE>() - 272usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_256_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_256_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_256_STATE::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_256_STATE, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_256_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_256_STATE = _SYMCRYPT_HMAC_SHA3_256_STATE;
pub type PSYMCRYPT_HMAC_SHA3_256_STATE = *mut _SYMCRYPT_HMAC_SHA3_256_STATE;
pub type PCSYMCRYPT_HMAC_SHA3_256_STATE = *const SYMCRYPT_HMAC_SHA3_256_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY {
    pub generic: SYMCRYPT_HMAC_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY>() - 512usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA3_384_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_384_STATE {
    pub generic: SYMCRYPT_HMAC_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_384_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_384_STATE>() - 272usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_384_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_384_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_384_STATE::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_384_STATE, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_384_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_384_STATE = _SYMCRYPT_HMAC_SHA3_384_STATE;
pub type PSYMCRYPT_HMAC_SHA3_384_STATE = *mut _SYMCRYPT_HMAC_SHA3_384_STATE;
pub type PCSYMCRYPT_HMAC_SHA3_384_STATE = *const SYMCRYPT_HMAC_SHA3_384_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY {
    pub generic: SYMCRYPT_HMAC_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY>() - 512usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY = _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY;
pub type PSYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY = *mut _SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY;
pub type PCSYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY = *const SYMCRYPT_HMAC_SHA3_512_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HMAC_SHA3_512_STATE {
    pub generic: SYMCRYPT_HMAC_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HMAC_SHA3_512_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_HMAC_SHA3_512_STATE>() - 272usize];
    ["Alignment of _SYMCRYPT_HMAC_SHA3_512_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_HMAC_SHA3_512_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_HMAC_SHA3_512_STATE::generic"]
        [::std::mem::offset_of!(_SYMCRYPT_HMAC_SHA3_512_STATE, generic) - 0usize];
};
impl Default for _SYMCRYPT_HMAC_SHA3_512_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HMAC_SHA3_512_STATE = _SYMCRYPT_HMAC_SHA3_512_STATE;
pub type PSYMCRYPT_HMAC_SHA3_512_STATE = *mut _SYMCRYPT_HMAC_SHA3_512_STATE;
pub type PCSYMCRYPT_HMAC_SHA3_512_STATE = *const SYMCRYPT_HMAC_SHA3_512_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_AES_EXPANDED_KEY {
    pub RoundKey: [[[BYTE; 4usize]; 4usize]; 29usize],
    pub lastEncRoundKey: *mut [[BYTE; 4usize]; 4usize],
    pub lastDecRoundKey: *mut [[BYTE; 4usize]; 4usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_AES_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_AES_EXPANDED_KEY>() - 496usize];
    ["Alignment of _SYMCRYPT_AES_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_AES_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::RoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, RoundKey) - 0usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::lastEncRoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, lastEncRoundKey) - 464usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::lastDecRoundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, lastDecRoundKey) - 472usize];
    ["Offset of field: _SYMCRYPT_AES_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_EXPANDED_KEY, magic) - 480usize];
};
impl Default for _SYMCRYPT_AES_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_AES_EXPANDED_KEY = _SYMCRYPT_AES_EXPANDED_KEY;
pub type PSYMCRYPT_AES_EXPANDED_KEY = *mut _SYMCRYPT_AES_EXPANDED_KEY;
pub type PCSYMCRYPT_AES_EXPANDED_KEY = *const SYMCRYPT_AES_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_AES_CMAC_EXPANDED_KEY {
    pub aesKey: SYMCRYPT_AES_EXPANDED_KEY,
    pub K1: [BYTE; 16usize],
    pub K2: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_AES_CMAC_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_AES_CMAC_EXPANDED_KEY>() - 544usize];
    ["Alignment of _SYMCRYPT_AES_CMAC_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_AES_CMAC_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::aesKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, aesKey) - 0usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::K1"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, K1) - 496usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::K2"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, K2) - 512usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_EXPANDED_KEY, magic) - 528usize];
};
impl Default for _SYMCRYPT_AES_CMAC_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_AES_CMAC_EXPANDED_KEY = _SYMCRYPT_AES_CMAC_EXPANDED_KEY;
pub type PSYMCRYPT_AES_CMAC_EXPANDED_KEY = *mut _SYMCRYPT_AES_CMAC_EXPANDED_KEY;
pub type PCSYMCRYPT_AES_CMAC_EXPANDED_KEY = *const SYMCRYPT_AES_CMAC_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_AES_CMAC_STATE {
    pub chain: [BYTE; 16usize],
    pub buf: [BYTE; 16usize],
    pub bytesInBuf: SIZE_T,
    pub pKey: PCSYMCRYPT_AES_CMAC_EXPANDED_KEY,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_AES_CMAC_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_AES_CMAC_STATE>() - 64usize];
    ["Alignment of _SYMCRYPT_AES_CMAC_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_AES_CMAC_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_STATE, chain) - 0usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_STATE::buf"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_STATE, buf) - 16usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_STATE::bytesInBuf"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_STATE, bytesInBuf) - 32usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_STATE, pKey) - 40usize];
    ["Offset of field: _SYMCRYPT_AES_CMAC_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_AES_CMAC_STATE, magic) - 48usize];
};
impl Default for _SYMCRYPT_AES_CMAC_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_AES_CMAC_STATE = _SYMCRYPT_AES_CMAC_STATE;
pub type PSYMCRYPT_AES_CMAC_STATE = *mut _SYMCRYPT_AES_CMAC_STATE;
pub type PCSYMCRYPT_AES_CMAC_STATE = *const SYMCRYPT_AES_CMAC_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_POLY1305_STATE {
    pub r: [UINT32; 4usize],
    pub s: [UINT32; 4usize],
    pub a: [UINT32; 5usize],
    pub bytesInBuffer: SIZE_T,
    pub buf: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_POLY1305_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_POLY1305_STATE>() - 96usize];
    ["Alignment of _SYMCRYPT_POLY1305_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_POLY1305_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::r"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, r) - 0usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::s"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, s) - 16usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::a"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, a) - 32usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::bytesInBuffer"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, bytesInBuffer) - 56usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::buf"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, buf) - 64usize];
    ["Offset of field: _SYMCRYPT_POLY1305_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_POLY1305_STATE, magic) - 80usize];
};
pub type SYMCRYPT_POLY1305_STATE = _SYMCRYPT_POLY1305_STATE;
pub type PSYMCRYPT_POLY1305_STATE = *mut _SYMCRYPT_POLY1305_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_XTS_AES_EXPANDED_KEY {
    pub key1: SYMCRYPT_AES_EXPANDED_KEY,
    pub key2: SYMCRYPT_AES_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_XTS_AES_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_XTS_AES_EXPANDED_KEY>() - 992usize];
    ["Alignment of _SYMCRYPT_XTS_AES_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_XTS_AES_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_XTS_AES_EXPANDED_KEY::key1"]
        [::std::mem::offset_of!(_SYMCRYPT_XTS_AES_EXPANDED_KEY, key1) - 0usize];
    ["Offset of field: _SYMCRYPT_XTS_AES_EXPANDED_KEY::key2"]
        [::std::mem::offset_of!(_SYMCRYPT_XTS_AES_EXPANDED_KEY, key2) - 496usize];
};
impl Default for _SYMCRYPT_XTS_AES_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_XTS_AES_EXPANDED_KEY = _SYMCRYPT_XTS_AES_EXPANDED_KEY;
pub type PSYMCRYPT_XTS_AES_EXPANDED_KEY = *mut _SYMCRYPT_XTS_AES_EXPANDED_KEY;
pub type PCSYMCRYPT_XTS_AES_EXPANDED_KEY = *const SYMCRYPT_XTS_AES_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MAC_STATE {
    pub md5State: SYMCRYPT_HMAC_MD5_STATE,
    pub sha1State: SYMCRYPT_HMAC_SHA1_STATE,
    pub sha256State: SYMCRYPT_HMAC_SHA256_STATE,
    pub sha384State: SYMCRYPT_HMAC_SHA384_STATE,
    pub sha512State: SYMCRYPT_HMAC_SHA512_STATE,
    pub aescmacState: SYMCRYPT_AES_CMAC_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MAC_STATE"][::std::mem::size_of::<_SYMCRYPT_MAC_STATE>() - 240usize];
    ["Alignment of _SYMCRYPT_MAC_STATE"][::std::mem::align_of::<_SYMCRYPT_MAC_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::md5State"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, md5State) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::sha1State"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, sha1State) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::sha256State"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, sha256State) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::sha384State"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, sha384State) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::sha512State"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, sha512State) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_STATE::aescmacState"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_STATE, aescmacState) - 0usize];
};
impl Default for _SYMCRYPT_MAC_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MAC_STATE = _SYMCRYPT_MAC_STATE;
pub type PSYMCRYPT_MAC_STATE = *mut _SYMCRYPT_MAC_STATE;
pub type PCSYMCRYPT_MAC_STATE = *const SYMCRYPT_MAC_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MAC_EXPANDED_KEY {
    pub md5Key: SYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    pub sha1Key: SYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    pub sha256Key: SYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    pub sha384Key: SYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    pub sha512Key: SYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    pub aescmacKey: SYMCRYPT_AES_CMAC_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MAC_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_MAC_EXPANDED_KEY>() - 544usize];
    ["Alignment of _SYMCRYPT_MAC_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_MAC_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::md5Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, md5Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha1Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha1Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha256Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha256Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha384Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha384Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::sha512Key"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, sha512Key) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC_EXPANDED_KEY::aescmacKey"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC_EXPANDED_KEY, aescmacKey) - 0usize];
};
impl Default for _SYMCRYPT_MAC_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MAC_EXPANDED_KEY = _SYMCRYPT_MAC_EXPANDED_KEY;
pub type PSYMCRYPT_MAC_EXPANDED_KEY = *mut _SYMCRYPT_MAC_EXPANDED_KEY;
pub type PCSYMCRYPT_MAC_EXPANDED_KEY = *const SYMCRYPT_MAC_EXPANDED_KEY;
pub type PSYMCRYPT_MAC_EXPAND_KEY = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PVOID, pbKey: PCBYTE, cbKey: SIZE_T) -> SYMCRYPT_ERROR,
>;
pub type PSYMCRYPT_MAC_INIT =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pExpandedKey: PCVOID)>;
pub type PSYMCRYPT_MAC_APPEND =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbData: PCBYTE, cbData: SIZE_T)>;
pub type PSYMCRYPT_MAC_RESULT =
    ::std::option::Option<unsafe extern "C" fn(pState: PVOID, pbResult: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MAC {
    pub expandKeyFunc: PSYMCRYPT_MAC_EXPAND_KEY,
    pub initFunc: PSYMCRYPT_MAC_INIT,
    pub appendFunc: PSYMCRYPT_MAC_APPEND,
    pub resultFunc: PSYMCRYPT_MAC_RESULT,
    pub expandedKeySize: SIZE_T,
    pub stateSize: SIZE_T,
    pub resultSize: SIZE_T,
    pub ppHashAlgorithm: *const PCSYMCRYPT_HASH,
    pub outerChainingStateOffset: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MAC"][::std::mem::size_of::<_SYMCRYPT_MAC>() - 72usize];
    ["Alignment of _SYMCRYPT_MAC"][::std::mem::align_of::<_SYMCRYPT_MAC>() - 8usize];
    ["Offset of field: _SYMCRYPT_MAC::expandKeyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, expandKeyFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_MAC::initFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, initFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_MAC::appendFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, appendFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_MAC::resultFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, resultFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_MAC::expandedKeySize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, expandedKeySize) - 32usize];
    ["Offset of field: _SYMCRYPT_MAC::stateSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, stateSize) - 40usize];
    ["Offset of field: _SYMCRYPT_MAC::resultSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, resultSize) - 48usize];
    ["Offset of field: _SYMCRYPT_MAC::ppHashAlgorithm"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, ppHashAlgorithm) - 56usize];
    ["Offset of field: _SYMCRYPT_MAC::outerChainingStateOffset"]
        [::std::mem::offset_of!(_SYMCRYPT_MAC, outerChainingStateOffset) - 64usize];
};
impl Default for _SYMCRYPT_MAC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MAC = _SYMCRYPT_MAC;
pub type PSYMCRYPT_MAC = *mut _SYMCRYPT_MAC;
pub type PCSYMCRYPT_MAC = *const SYMCRYPT_MAC;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_3DES_EXPANDED_KEY {
    pub roundKey: [[[UINT32; 2usize]; 16usize]; 3usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_3DES_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_3DES_EXPANDED_KEY>() - 400usize];
    ["Alignment of _SYMCRYPT_3DES_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_3DES_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_3DES_EXPANDED_KEY::roundKey"]
        [::std::mem::offset_of!(_SYMCRYPT_3DES_EXPANDED_KEY, roundKey) - 0usize];
    ["Offset of field: _SYMCRYPT_3DES_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_3DES_EXPANDED_KEY, magic) - 384usize];
};
pub type SYMCRYPT_3DES_EXPANDED_KEY = _SYMCRYPT_3DES_EXPANDED_KEY;
pub type PSYMCRYPT_3DES_EXPANDED_KEY = *mut _SYMCRYPT_3DES_EXPANDED_KEY;
pub type PCSYMCRYPT_3DES_EXPANDED_KEY = *const SYMCRYPT_3DES_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_DES_EXPANDED_KEY {
    pub threeDes: SYMCRYPT_3DES_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DES_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_DES_EXPANDED_KEY>() - 400usize];
    ["Alignment of _SYMCRYPT_DES_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_DES_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_DES_EXPANDED_KEY::threeDes"]
        [::std::mem::offset_of!(_SYMCRYPT_DES_EXPANDED_KEY, threeDes) - 0usize];
};
pub type SYMCRYPT_DES_EXPANDED_KEY = _SYMCRYPT_DES_EXPANDED_KEY;
pub type PSYMCRYPT_DES_EXPANDED_KEY = *mut _SYMCRYPT_DES_EXPANDED_KEY;
pub type PCSYMCRYPT_DES_EXPANDED_KEY = *const SYMCRYPT_DES_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_DESX_EXPANDED_KEY {
    pub desKey: SYMCRYPT_DES_EXPANDED_KEY,
    pub inputWhitening: [BYTE; 8usize],
    pub outputWhitening: [BYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DESX_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_DESX_EXPANDED_KEY>() - 416usize];
    ["Alignment of _SYMCRYPT_DESX_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_DESX_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_DESX_EXPANDED_KEY::desKey"]
        [::std::mem::offset_of!(_SYMCRYPT_DESX_EXPANDED_KEY, desKey) - 0usize];
    ["Offset of field: _SYMCRYPT_DESX_EXPANDED_KEY::inputWhitening"]
        [::std::mem::offset_of!(_SYMCRYPT_DESX_EXPANDED_KEY, inputWhitening) - 400usize];
    ["Offset of field: _SYMCRYPT_DESX_EXPANDED_KEY::outputWhitening"]
        [::std::mem::offset_of!(_SYMCRYPT_DESX_EXPANDED_KEY, outputWhitening) - 408usize];
};
pub type SYMCRYPT_DESX_EXPANDED_KEY = _SYMCRYPT_DESX_EXPANDED_KEY;
pub type PSYMCRYPT_DESX_EXPANDED_KEY = *mut _SYMCRYPT_DESX_EXPANDED_KEY;
pub type PCSYMCRYPT_DESX_EXPANDED_KEY = *const SYMCRYPT_DESX_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RC2_EXPANDED_KEY {
    pub K: [UINT16; 64usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RC2_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_RC2_EXPANDED_KEY>() - 144usize];
    ["Alignment of _SYMCRYPT_RC2_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_RC2_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_RC2_EXPANDED_KEY::K"]
        [::std::mem::offset_of!(_SYMCRYPT_RC2_EXPANDED_KEY, K) - 0usize];
    ["Offset of field: _SYMCRYPT_RC2_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_RC2_EXPANDED_KEY, magic) - 128usize];
};
impl Default for _SYMCRYPT_RC2_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RC2_EXPANDED_KEY = _SYMCRYPT_RC2_EXPANDED_KEY;
pub type PSYMCRYPT_RC2_EXPANDED_KEY = *mut _SYMCRYPT_RC2_EXPANDED_KEY;
pub type PCSYMCRYPT_RC2_EXPANDED_KEY = *const SYMCRYPT_RC2_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_CCM_STATE {
    pub pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
    pub pExpandedKey: PCVOID,
    pub cbData: UINT64,
    pub cbTag: SIZE_T,
    pub cbNonce: SIZE_T,
    pub cbCounter: SIZE_T,
    pub bytesProcessed: UINT64,
    pub bytesInMacBlock: SIZE_T,
    pub counterBlock: [BYTE; 16usize],
    pub macBlock: [BYTE; 16usize],
    pub keystreamBlock: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_CCM_STATE"][::std::mem::size_of::<_SYMCRYPT_CCM_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_CCM_STATE"][::std::mem::align_of::<_SYMCRYPT_CCM_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::pBlockCipher"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, pBlockCipher) - 0usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::pExpandedKey"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, pExpandedKey) - 8usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::cbData"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, cbData) - 16usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::cbTag"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, cbTag) - 24usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::cbNonce"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, cbNonce) - 32usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::cbCounter"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, cbCounter) - 40usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::bytesProcessed"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, bytesProcessed) - 48usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::bytesInMacBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, bytesInMacBlock) - 56usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::counterBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, counterBlock) - 64usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::macBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, macBlock) - 80usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::keystreamBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, keystreamBlock) - 96usize];
    ["Offset of field: _SYMCRYPT_CCM_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_CCM_STATE, magic) - 112usize];
};
impl Default for _SYMCRYPT_CCM_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_CCM_STATE = _SYMCRYPT_CCM_STATE;
pub type PSYMCRYPT_CCM_STATE = *mut _SYMCRYPT_CCM_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS {
    pub aes: SYMCRYPT_AES_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS"]
        [::std::mem::size_of::<_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS>() - 496usize];
    ["Alignment of _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS"]
        [::std::mem::align_of::<_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS::aes"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS, aes) - 0usize];
};
impl Default for _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS = _SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_GF128_ELEMENT {
    pub ull: [UINT64; 2usize],
    pub m128i: __m128i,
    pub ul: [UINT32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GF128_ELEMENT"][::std::mem::size_of::<_SYMCRYPT_GF128_ELEMENT>() - 16usize];
    ["Alignment of _SYMCRYPT_GF128_ELEMENT"]
        [::std::mem::align_of::<_SYMCRYPT_GF128_ELEMENT>() - 16usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::ull"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, ull) - 0usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::m128i"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, m128i) - 0usize];
    ["Offset of field: _SYMCRYPT_GF128_ELEMENT::ul"]
        [::std::mem::offset_of!(_SYMCRYPT_GF128_ELEMENT, ul) - 0usize];
};
impl Default for _SYMCRYPT_GF128_ELEMENT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GF128_ELEMENT = _SYMCRYPT_GF128_ELEMENT;
pub type PSYMCRYPT_GF128_ELEMENT = *mut _SYMCRYPT_GF128_ELEMENT;
pub type PCSYMCRYPT_GF128_ELEMENT = *const SYMCRYPT_GF128_ELEMENT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GHASH_EXPANDED_KEY {
    pub table: [SYMCRYPT_GF128_ELEMENT; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GHASH_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_GHASH_EXPANDED_KEY>() - 2048usize];
    ["Alignment of _SYMCRYPT_GHASH_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_GHASH_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_GHASH_EXPANDED_KEY::table"]
        [::std::mem::offset_of!(_SYMCRYPT_GHASH_EXPANDED_KEY, table) - 0usize];
};
impl Default for _SYMCRYPT_GHASH_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GHASH_EXPANDED_KEY = _SYMCRYPT_GHASH_EXPANDED_KEY;
pub type PSYMCRYPT_GHASH_EXPANDED_KEY = *mut _SYMCRYPT_GHASH_EXPANDED_KEY;
pub type PCSYMCRYPT_GHASH_EXPANDED_KEY = *const SYMCRYPT_GHASH_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GCM_EXPANDED_KEY {
    pub ghashKey: SYMCRYPT_GHASH_EXPANDED_KEY,
    pub pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
    pub __bindgen_padding_0: u64,
    pub blockcipherKey: SYMCRYPT_GCM_SUPPORTED_BLOCKCIPHER_KEYS,
    pub cbKey: SIZE_T,
    pub abKey: [BYTE; 32usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_GCM_EXPANDED_KEY>() - 2608usize];
    ["Alignment of _SYMCRYPT_GCM_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_GCM_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::ghashKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, ghashKey) - 0usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::pBlockCipher"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, pBlockCipher) - 2048usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::blockcipherKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, blockcipherKey) - 2064usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::cbKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, cbKey) - 2560usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::abKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, abKey) - 2568usize];
    ["Offset of field: _SYMCRYPT_GCM_EXPANDED_KEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_EXPANDED_KEY, magic) - 2600usize];
};
impl Default for _SYMCRYPT_GCM_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_EXPANDED_KEY = _SYMCRYPT_GCM_EXPANDED_KEY;
pub type PSYMCRYPT_GCM_EXPANDED_KEY = *mut _SYMCRYPT_GCM_EXPANDED_KEY;
pub type PCSYMCRYPT_GCM_EXPANDED_KEY = *const SYMCRYPT_GCM_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_GCM_STATE {
    pub pKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
    pub cbData: UINT64,
    pub cbAuthData: UINT64,
    pub bytesInMacBlock: SIZE_T,
    pub ghashState: SYMCRYPT_GF128_ELEMENT,
    pub counterBlock: [BYTE; 16usize],
    pub macBlock: [BYTE; 16usize],
    pub keystreamBlock: [BYTE; 16usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_GCM_STATE"][::std::mem::size_of::<_SYMCRYPT_GCM_STATE>() - 112usize];
    ["Alignment of _SYMCRYPT_GCM_STATE"][::std::mem::align_of::<_SYMCRYPT_GCM_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::pKey"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, pKey) - 0usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::cbData"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, cbData) - 8usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::cbAuthData"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, cbAuthData) - 16usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::bytesInMacBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, bytesInMacBlock) - 24usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::ghashState"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, ghashState) - 32usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::counterBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, counterBlock) - 48usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::macBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, macBlock) - 64usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::keystreamBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, keystreamBlock) - 80usize];
    ["Offset of field: _SYMCRYPT_GCM_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_GCM_STATE, magic) - 96usize];
};
impl Default for _SYMCRYPT_GCM_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_GCM_STATE = _SYMCRYPT_GCM_STATE;
pub type PSYMCRYPT_GCM_STATE = *mut _SYMCRYPT_GCM_STATE;
pub type PCSYMCRYPT_GCM_STATE = *const SYMCRYPT_GCM_STATE;
pub type PSYMCRYPT_BLOCKCIPHER_EXPAND_KEY = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PVOID, pbKey: PCBYTE, cbKey: SIZE_T) -> SYMCRYPT_ERROR,
>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT =
    ::std::option::Option<unsafe extern "C" fn(pExpandedKey: PCVOID, pbSrc: PCBYTE, pbDst: PBYTE)>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB = ::std::option::Option<
    unsafe extern "C" fn(pExpandedKey: PCVOID, pbSrc: PCBYTE, pbDst: PBYTE, cbData: SIZE_T),
>;
pub type PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE = ::std::option::Option<
    unsafe extern "C" fn(
        pExpandedKey: PCVOID,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    ),
>;
pub type PSYMCRYPT_BLOCKCIPHER_MAC_MODE = ::std::option::Option<
    unsafe extern "C" fn(
        pExpandedKey: PCVOID,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        cbData: SIZE_T,
    ),
>;
pub type PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE = ::std::option::Option<
    unsafe extern "C" fn(pState: PVOID, pbSrc: PCBYTE, pbDst: PBYTE, cbData: SIZE_T),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_BLOCKCIPHER {
    pub expandKeyFunc: PSYMCRYPT_BLOCKCIPHER_EXPAND_KEY,
    pub encryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT,
    pub decryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT,
    pub ecbEncryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB,
    pub ecbDecryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_ECB,
    pub cbcEncryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub cbcDecryptFunc: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub cbcMacFunc: PSYMCRYPT_BLOCKCIPHER_MAC_MODE,
    pub ctrMsb64Func: PSYMCRYPT_BLOCKCIPHER_CRYPT_MODE,
    pub gcmEncryptPartFunc: PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE,
    pub gcmDecryptPartFunc: PSYMCRYPT_BLOCKCIPHER_AEADPART_MODE,
    pub blockSize: SIZE_T,
    pub expandedKeySize: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_BLOCKCIPHER"][::std::mem::size_of::<_SYMCRYPT_BLOCKCIPHER>() - 104usize];
    ["Alignment of _SYMCRYPT_BLOCKCIPHER"]
        [::std::mem::align_of::<_SYMCRYPT_BLOCKCIPHER>() - 8usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::expandKeyFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, expandKeyFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::encryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, encryptFunc) - 8usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::decryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, decryptFunc) - 16usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ecbEncryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ecbEncryptFunc) - 24usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ecbDecryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ecbDecryptFunc) - 32usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcEncryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcEncryptFunc) - 40usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcDecryptFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcDecryptFunc) - 48usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::cbcMacFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, cbcMacFunc) - 56usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::ctrMsb64Func"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, ctrMsb64Func) - 64usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::gcmEncryptPartFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, gcmEncryptPartFunc) - 72usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::gcmDecryptPartFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, gcmDecryptPartFunc) - 80usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::blockSize"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, blockSize) - 88usize];
    ["Offset of field: _SYMCRYPT_BLOCKCIPHER::expandedKeySize"]
        [::std::mem::offset_of!(_SYMCRYPT_BLOCKCIPHER, expandedKeySize) - 96usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_SESSION_REPLAY_STATE {
    pub replayMask: UINT64,
    pub messageNumber: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SESSION_REPLAY_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_SESSION_REPLAY_STATE>() - 16usize];
    ["Alignment of _SYMCRYPT_SESSION_REPLAY_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_SESSION_REPLAY_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_SESSION_REPLAY_STATE::replayMask"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION_REPLAY_STATE, replayMask) - 0usize];
    ["Offset of field: _SYMCRYPT_SESSION_REPLAY_STATE::messageNumber"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION_REPLAY_STATE, messageNumber) - 8usize];
};
pub type SYMCRYPT_SESSION_REPLAY_STATE = _SYMCRYPT_SESSION_REPLAY_STATE;
pub type PSYMCRYPT_SESSION_REPLAY_STATE = *mut _SYMCRYPT_SESSION_REPLAY_STATE;
pub type PCSYMCRYPT_SESSION_REPLAY_STATE = *const SYMCRYPT_SESSION_REPLAY_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SESSION {
    pub replayState: SYMCRYPT_SESSION_REPLAY_STATE,
    pub senderId: UINT32,
    pub flags: UINT32,
    pub pMutex: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SESSION"][::std::mem::size_of::<_SYMCRYPT_SESSION>() - 32usize];
    ["Alignment of _SYMCRYPT_SESSION"][::std::mem::align_of::<_SYMCRYPT_SESSION>() - 16usize];
    ["Offset of field: _SYMCRYPT_SESSION::replayState"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION, replayState) - 0usize];
    ["Offset of field: _SYMCRYPT_SESSION::senderId"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION, senderId) - 16usize];
    ["Offset of field: _SYMCRYPT_SESSION::flags"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION, flags) - 20usize];
    ["Offset of field: _SYMCRYPT_SESSION::pMutex"]
        [::std::mem::offset_of!(_SYMCRYPT_SESSION, pMutex) - 24usize];
};
impl Default for _SYMCRYPT_SESSION {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SESSION = _SYMCRYPT_SESSION;
pub type PSYMCRYPT_SESSION = *mut _SYMCRYPT_SESSION;
pub type SYMCRYPT_RC4_S_TYPE = BYTE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RC4_STATE {
    pub S: [SYMCRYPT_RC4_S_TYPE; 256usize],
    pub i: BYTE,
    pub j: BYTE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RC4_STATE"][::std::mem::size_of::<_SYMCRYPT_RC4_STATE>() - 272usize];
    ["Alignment of _SYMCRYPT_RC4_STATE"][::std::mem::align_of::<_SYMCRYPT_RC4_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_RC4_STATE::S"]
        [::std::mem::offset_of!(_SYMCRYPT_RC4_STATE, S) - 0usize];
    ["Offset of field: _SYMCRYPT_RC4_STATE::i"]
        [::std::mem::offset_of!(_SYMCRYPT_RC4_STATE, i) - 256usize];
    ["Offset of field: _SYMCRYPT_RC4_STATE::j"]
        [::std::mem::offset_of!(_SYMCRYPT_RC4_STATE, j) - 257usize];
    ["Offset of field: _SYMCRYPT_RC4_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_RC4_STATE, magic) - 264usize];
};
impl Default for _SYMCRYPT_RC4_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RC4_STATE = _SYMCRYPT_RC4_STATE;
pub type PSYMCRYPT_RC4_STATE = *mut _SYMCRYPT_RC4_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_CHACHA20_STATE {
    pub key: [UINT32; 8usize],
    pub nonce: [UINT32; 3usize],
    pub offset: UINT64,
    pub keystreamBufferValid: BOOLEAN,
    pub keystream: [BYTE; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_CHACHA20_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_CHACHA20_STATE>() - 128usize];
    ["Alignment of _SYMCRYPT_CHACHA20_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_CHACHA20_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_CHACHA20_STATE::key"]
        [::std::mem::offset_of!(_SYMCRYPT_CHACHA20_STATE, key) - 0usize];
    ["Offset of field: _SYMCRYPT_CHACHA20_STATE::nonce"]
        [::std::mem::offset_of!(_SYMCRYPT_CHACHA20_STATE, nonce) - 32usize];
    ["Offset of field: _SYMCRYPT_CHACHA20_STATE::offset"]
        [::std::mem::offset_of!(_SYMCRYPT_CHACHA20_STATE, offset) - 48usize];
    ["Offset of field: _SYMCRYPT_CHACHA20_STATE::keystreamBufferValid"]
        [::std::mem::offset_of!(_SYMCRYPT_CHACHA20_STATE, keystreamBufferValid) - 56usize];
    ["Offset of field: _SYMCRYPT_CHACHA20_STATE::keystream"]
        [::std::mem::offset_of!(_SYMCRYPT_CHACHA20_STATE, keystream) - 57usize];
};
impl Default for _SYMCRYPT_CHACHA20_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_CHACHA20_STATE = _SYMCRYPT_CHACHA20_STATE;
pub type PSYMCRYPT_CHACHA20_STATE = *mut _SYMCRYPT_CHACHA20_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RNG_AES_STATE {
    pub keyAndV: [BYTE; 48usize],
    pub previousBlock: [BYTE; 16usize],
    pub requestCounter: UINT64,
    pub fips140_2Check: BOOLEAN,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RNG_AES_STATE"][::std::mem::size_of::<_SYMCRYPT_RNG_AES_STATE>() - 96usize];
    ["Alignment of _SYMCRYPT_RNG_AES_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_RNG_AES_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_STATE::keyAndV"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_STATE, keyAndV) - 0usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_STATE::previousBlock"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_STATE, previousBlock) - 48usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_STATE::requestCounter"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_STATE, requestCounter) - 64usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_STATE::fips140_2Check"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_STATE, fips140_2Check) - 72usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_STATE, magic) - 80usize];
};
impl Default for _SYMCRYPT_RNG_AES_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RNG_AES_STATE = _SYMCRYPT_RNG_AES_STATE;
pub type PSYMCRYPT_RNG_AES_STATE = *mut _SYMCRYPT_RNG_AES_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RNG_AES_FIPS140_2_STATE {
    pub rng: SYMCRYPT_RNG_AES_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RNG_AES_FIPS140_2_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_RNG_AES_FIPS140_2_STATE>() - 96usize];
    ["Alignment of _SYMCRYPT_RNG_AES_FIPS140_2_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_RNG_AES_FIPS140_2_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_RNG_AES_FIPS140_2_STATE::rng"]
        [::std::mem::offset_of!(_SYMCRYPT_RNG_AES_FIPS140_2_STATE, rng) - 0usize];
};
impl Default for _SYMCRYPT_RNG_AES_FIPS140_2_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RNG_AES_FIPS140_2_STATE = _SYMCRYPT_RNG_AES_FIPS140_2_STATE;
pub type PSYMCRYPT_RNG_AES_FIPS140_2_STATE = *mut _SYMCRYPT_RNG_AES_FIPS140_2_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MARVIN32_EXPANDED_SEED {
    pub s: [UINT32; 2usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MARVIN32_EXPANDED_SEED"]
        [::std::mem::size_of::<_SYMCRYPT_MARVIN32_EXPANDED_SEED>() - 16usize];
    ["Alignment of _SYMCRYPT_MARVIN32_EXPANDED_SEED"]
        [::std::mem::align_of::<_SYMCRYPT_MARVIN32_EXPANDED_SEED>() - 16usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_EXPANDED_SEED::s"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_EXPANDED_SEED, s) - 0usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_EXPANDED_SEED::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_EXPANDED_SEED, magic) - 8usize];
};
pub type SYMCRYPT_MARVIN32_EXPANDED_SEED = _SYMCRYPT_MARVIN32_EXPANDED_SEED;
pub type PSYMCRYPT_MARVIN32_EXPANDED_SEED = *mut _SYMCRYPT_MARVIN32_EXPANDED_SEED;
pub type PCSYMCRYPT_MARVIN32_EXPANDED_SEED = *const SYMCRYPT_MARVIN32_EXPANDED_SEED;
pub type SYMCRYPT_MARVIN32_CHAINING_STATE = SYMCRYPT_MARVIN32_EXPANDED_SEED;
pub type PSYMCRYPT_MARVIN32_CHAINING_STATE = *mut SYMCRYPT_MARVIN32_EXPANDED_SEED;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MARVIN32_STATE {
    pub buffer: [BYTE; 8usize],
    pub __bindgen_padding_0: u64,
    pub chain: SYMCRYPT_MARVIN32_CHAINING_STATE,
    pub pSeed: PCSYMCRYPT_MARVIN32_EXPANDED_SEED,
    pub dataLength: UINT32,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MARVIN32_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_MARVIN32_STATE>() - 64usize];
    ["Alignment of _SYMCRYPT_MARVIN32_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_MARVIN32_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_STATE::buffer"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_STATE, buffer) - 0usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_STATE::chain"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_STATE, chain) - 16usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_STATE::pSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_STATE, pSeed) - 32usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_STATE::dataLength"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_STATE, dataLength) - 40usize];
    ["Offset of field: _SYMCRYPT_MARVIN32_STATE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MARVIN32_STATE, magic) - 48usize];
};
impl Default for _SYMCRYPT_MARVIN32_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_MARVIN32_STATE = _SYMCRYPT_MARVIN32_STATE;
pub type PSYMCRYPT_MARVIN32_STATE = *mut _SYMCRYPT_MARVIN32_STATE;
pub type PCSYMCRYPT_MARVIN32_STATE = *const SYMCRYPT_MARVIN32_STATE;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_PBKDF2_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_PBKDF2_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_PBKDF2_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_PBKDF2_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_PBKDF2_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_PBKDF2_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_PBKDF2_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_PBKDF2_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_PBKDF2_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_PBKDF2_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_PBKDF2_EXPANDED_KEY = _SYMCRYPT_PBKDF2_EXPANDED_KEY;
pub type PSYMCRYPT_PBKDF2_EXPANDED_KEY = *mut _SYMCRYPT_PBKDF2_EXPANDED_KEY;
pub type PCSYMCRYPT_PBKDF2_EXPANDED_KEY = *const SYMCRYPT_PBKDF2_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_SP800_108_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SP800_108_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_SP800_108_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_SP800_108_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_SP800_108_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_SP800_108_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_SP800_108_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_SP800_108_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_SP800_108_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_SP800_108_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SP800_108_EXPANDED_KEY = _SYMCRYPT_SP800_108_EXPANDED_KEY;
pub type PSYMCRYPT_SP800_108_EXPANDED_KEY = *mut _SYMCRYPT_SP800_108_EXPANDED_KEY;
pub type PCSYMCRYPT_SP800_108_EXPANDED_KEY = *const SYMCRYPT_SP800_108_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY {
    pub macMd5Key: SYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    pub macSha1Key: SYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_TLSPRF1_1_EXPANDED_KEY>() - 128usize];
    ["Alignment of _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_TLSPRF1_1_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY::macMd5Key"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_1_EXPANDED_KEY, macMd5Key) - 0usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY::macSha1Key"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_1_EXPANDED_KEY, macSha1Key) - 48usize];
};
pub type SYMCRYPT_TLSPRF1_1_EXPANDED_KEY = _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY;
pub type PSYMCRYPT_TLSPRF1_1_EXPANDED_KEY = *mut _SYMCRYPT_TLSPRF1_1_EXPANDED_KEY;
pub type PCSYMCRYPT_TLSPRF1_1_EXPANDED_KEY = *const SYMCRYPT_TLSPRF1_1_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_TLSPRF1_2_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_TLSPRF1_2_EXPANDED_KEY = _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
pub type PSYMCRYPT_TLSPRF1_2_EXPANDED_KEY = *mut _SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
pub type PCSYMCRYPT_TLSPRF1_2_EXPANDED_KEY = *const SYMCRYPT_TLSPRF1_2_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_SSHKDF_EXPANDED_KEY {
    pub pHashFunc: PCSYMCRYPT_HASH,
    pub __bindgen_padding_0: u64,
    pub hashState: SYMCRYPT_HASH_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SSHKDF_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_SSHKDF_EXPANDED_KEY>() - 256usize];
    ["Alignment of _SYMCRYPT_SSHKDF_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_SSHKDF_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_SSHKDF_EXPANDED_KEY::pHashFunc"]
        [::std::mem::offset_of!(_SYMCRYPT_SSHKDF_EXPANDED_KEY, pHashFunc) - 0usize];
    ["Offset of field: _SYMCRYPT_SSHKDF_EXPANDED_KEY::hashState"]
        [::std::mem::offset_of!(_SYMCRYPT_SSHKDF_EXPANDED_KEY, hashState) - 16usize];
};
impl Default for _SYMCRYPT_SSHKDF_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SSHKDF_EXPANDED_KEY = _SYMCRYPT_SSHKDF_EXPANDED_KEY;
pub type PSYMCRYPT_SSHKDF_EXPANDED_KEY = *mut _SYMCRYPT_SSHKDF_EXPANDED_KEY;
pub type PCSYMCRYPT_SSHKDF_EXPANDED_KEY = *const SYMCRYPT_SSHKDF_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_SRTPKDF_EXPANDED_KEY {
    pub aesExpandedKey: SYMCRYPT_AES_EXPANDED_KEY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_SRTPKDF_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_SRTPKDF_EXPANDED_KEY>() - 496usize];
    ["Alignment of _SYMCRYPT_SRTPKDF_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_SRTPKDF_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_SRTPKDF_EXPANDED_KEY::aesExpandedKey"]
        [::std::mem::offset_of!(_SYMCRYPT_SRTPKDF_EXPANDED_KEY, aesExpandedKey) - 0usize];
};
impl Default for _SYMCRYPT_SRTPKDF_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_SRTPKDF_EXPANDED_KEY = _SYMCRYPT_SRTPKDF_EXPANDED_KEY;
pub type PSYMCRYPT_SRTPKDF_EXPANDED_KEY = *mut _SYMCRYPT_SRTPKDF_EXPANDED_KEY;
pub type PCSYMCRYPT_SRTPKDF_EXPANDED_KEY = *const SYMCRYPT_SRTPKDF_EXPANDED_KEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_HKDF_EXPANDED_KEY {
    pub macKey: SYMCRYPT_MAC_EXPANDED_KEY,
    pub macAlg: PCSYMCRYPT_MAC,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_HKDF_EXPANDED_KEY"]
        [::std::mem::size_of::<_SYMCRYPT_HKDF_EXPANDED_KEY>() - 560usize];
    ["Alignment of _SYMCRYPT_HKDF_EXPANDED_KEY"]
        [::std::mem::align_of::<_SYMCRYPT_HKDF_EXPANDED_KEY>() - 16usize];
    ["Offset of field: _SYMCRYPT_HKDF_EXPANDED_KEY::macKey"]
        [::std::mem::offset_of!(_SYMCRYPT_HKDF_EXPANDED_KEY, macKey) - 0usize];
    ["Offset of field: _SYMCRYPT_HKDF_EXPANDED_KEY::macAlg"]
        [::std::mem::offset_of!(_SYMCRYPT_HKDF_EXPANDED_KEY, macAlg) - 544usize];
};
impl Default for _SYMCRYPT_HKDF_EXPANDED_KEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_HKDF_EXPANDED_KEY = _SYMCRYPT_HKDF_EXPANDED_KEY;
pub type PSYMCRYPT_HKDF_EXPANDED_KEY = *mut _SYMCRYPT_HKDF_EXPANDED_KEY;
pub type PCSYMCRYPT_HKDF_EXPANDED_KEY = *const SYMCRYPT_HKDF_EXPANDED_KEY;
pub type SYMCRYPT_INT = _SYMCRYPT_INT;
pub type PSYMCRYPT_INT = *mut SYMCRYPT_INT;
pub type PCSYMCRYPT_INT = *const SYMCRYPT_INT;
pub type SYMCRYPT_DIVISOR = _SYMCRYPT_DIVISOR;
pub type PSYMCRYPT_DIVISOR = *mut SYMCRYPT_DIVISOR;
pub type PCSYMCRYPT_DIVISOR = *const SYMCRYPT_DIVISOR;
pub type SYMCRYPT_MODULUS = _SYMCRYPT_MODULUS;
pub type PSYMCRYPT_MODULUS = *mut SYMCRYPT_MODULUS;
pub type PCSYMCRYPT_MODULUS = *const SYMCRYPT_MODULUS;
pub type SYMCRYPT_MODELEMENT = _SYMCRYPT_MODELEMENT;
pub type PSYMCRYPT_MODELEMENT = *mut SYMCRYPT_MODELEMENT;
pub type PCSYMCRYPT_MODELEMENT = *const SYMCRYPT_MODELEMENT;
pub type SYMCRYPT_ECPOINT = _SYMCRYPT_ECPOINT;
pub type PSYMCRYPT_ECPOINT = *mut SYMCRYPT_ECPOINT;
pub type PCSYMCRYPT_ECPOINT = *const SYMCRYPT_ECPOINT;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_INT {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub magic: SIZE_T,
    pub __bindgen_padding_0: u64,
    pub ti: _SYMCRYPT_INT__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_INT__bindgen_ty_1 {
    pub fdef: _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1 {
    pub uint32: [UINT32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(_SYMCRYPT_INT__bindgen_ty_1__bindgen_ty_1, uint32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_INT__bindgen_ty_1>() - 32usize];
    ["Alignment of _SYMCRYPT_INT__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_INT__bindgen_ty_1>() - 32usize];
    ["Offset of field: _SYMCRYPT_INT__bindgen_ty_1::fdef"]
        [::std::mem::offset_of!(_SYMCRYPT_INT__bindgen_ty_1, fdef) - 0usize];
};
impl Default for _SYMCRYPT_INT__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_INT"][::std::mem::size_of::<_SYMCRYPT_INT>() - 64usize];
    ["Alignment of _SYMCRYPT_INT"][::std::mem::align_of::<_SYMCRYPT_INT>() - 32usize];
    ["Offset of field: _SYMCRYPT_INT::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_INT::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_INT::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_INT::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_INT, magic) - 16usize];
    ["Offset of field: _SYMCRYPT_INT::ti"][::std::mem::offset_of!(_SYMCRYPT_INT, ti) - 32usize];
};
impl Default for _SYMCRYPT_INT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_DIVISOR {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub nBits: UINT32,
    pub magic: SIZE_T,
    pub td: _SYMCRYPT_DIVISOR__bindgen_ty_1,
    pub Int: SYMCRYPT_INT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_DIVISOR__bindgen_ty_1 {
    pub fdef: _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1 {
    pub W: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1::W"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR__bindgen_ty_1__bindgen_ty_1, W) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_DIVISOR__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_DIVISOR__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR__bindgen_ty_1::fdef"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR__bindgen_ty_1, fdef) - 0usize];
};
impl Default for _SYMCRYPT_DIVISOR__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DIVISOR"][::std::mem::size_of::<_SYMCRYPT_DIVISOR>() - 96usize];
    ["Alignment of _SYMCRYPT_DIVISOR"][::std::mem::align_of::<_SYMCRYPT_DIVISOR>() - 32usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::nBits"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, nBits) - 12usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, magic) - 16usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::td"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, td) - 24usize];
    ["Offset of field: _SYMCRYPT_DIVISOR::Int"]
        [::std::mem::offset_of!(_SYMCRYPT_DIVISOR, Int) - 32usize];
};
impl Default for _SYMCRYPT_DIVISOR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_MODULUS {
    pub type_: UINT32,
    pub nDigits: UINT32,
    pub cbSize: UINT32,
    pub flags: UINT32,
    pub cbModElement: UINT32,
    pub inv64: UINT64,
    pub magic: SIZE_T,
    pub tm: _SYMCRYPT_MODULUS__bindgen_ty_1,
    pub __bindgen_padding_0: [u64; 2usize],
    pub Divisor: SYMCRYPT_DIVISOR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MODULUS__bindgen_ty_1 {
    pub montgomery: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1,
    pub pseudoMersenne: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1 {
    pub Rsqr: PCUINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1::Rsqr"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1, Rsqr) - 0usize];
};
impl Default for _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2 {
    pub k: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2::k"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1__bindgen_ty_2, k) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODULUS__bindgen_ty_1>() - 8usize];
    ["Alignment of _SYMCRYPT_MODULUS__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODULUS__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1::montgomery"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1, montgomery) - 0usize];
    ["Offset of field: _SYMCRYPT_MODULUS__bindgen_ty_1::pseudoMersenne"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS__bindgen_ty_1, pseudoMersenne) - 0usize];
};
impl Default for _SYMCRYPT_MODULUS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODULUS"][::std::mem::size_of::<_SYMCRYPT_MODULUS>() - 160usize];
    ["Alignment of _SYMCRYPT_MODULUS"][::std::mem::align_of::<_SYMCRYPT_MODULUS>() - 32usize];
    ["Offset of field: _SYMCRYPT_MODULUS::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, type_) - 0usize];
    ["Offset of field: _SYMCRYPT_MODULUS::nDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, nDigits) - 4usize];
    ["Offset of field: _SYMCRYPT_MODULUS::cbSize"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, cbSize) - 8usize];
    ["Offset of field: _SYMCRYPT_MODULUS::flags"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, flags) - 12usize];
    ["Offset of field: _SYMCRYPT_MODULUS::cbModElement"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, cbModElement) - 16usize];
    ["Offset of field: _SYMCRYPT_MODULUS::inv64"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, inv64) - 24usize];
    ["Offset of field: _SYMCRYPT_MODULUS::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, magic) - 32usize];
    ["Offset of field: _SYMCRYPT_MODULUS::tm"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, tm) - 40usize];
    ["Offset of field: _SYMCRYPT_MODULUS::Divisor"]
        [::std::mem::offset_of!(_SYMCRYPT_MODULUS, Divisor) - 64usize];
};
impl Default for _SYMCRYPT_MODULUS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_MODELEMENT {
    pub d: _SYMCRYPT_MODELEMENT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_MODELEMENT__bindgen_ty_1 {
    pub uint32: [UINT32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODELEMENT__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_MODELEMENT__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYMCRYPT_MODELEMENT__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_MODELEMENT__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SYMCRYPT_MODELEMENT__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(_SYMCRYPT_MODELEMENT__bindgen_ty_1, uint32) - 0usize];
};
impl Default for _SYMCRYPT_MODELEMENT__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_MODELEMENT"][::std::mem::size_of::<_SYMCRYPT_MODELEMENT>() - 32usize];
    ["Alignment of _SYMCRYPT_MODELEMENT"][::std::mem::align_of::<_SYMCRYPT_MODELEMENT>() - 32usize];
    ["Offset of field: _SYMCRYPT_MODELEMENT::d"]
        [::std::mem::offset_of!(_SYMCRYPT_MODELEMENT, d) - 0usize];
};
impl Default for _SYMCRYPT_MODELEMENT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_RSAKEY {
    pub fAlgorithmInfo: UINT32,
    pub cbTotalSize: UINT32,
    pub hasPrivateKey: BOOLEAN,
    pub nSetBitsOfModulus: UINT32,
    pub nBitsOfModulus: UINT32,
    pub nDigitsOfModulus: UINT32,
    pub nPubExp: UINT32,
    pub nPrimes: UINT32,
    pub nBitsOfPrimes: [UINT32; 2usize],
    pub nDigitsOfPrimes: [UINT32; 2usize],
    pub nMaxDigitsOfPrimes: UINT32,
    pub au64PubExp: [UINT64; 1usize],
    pub pbPrimes: [PBYTE; 2usize],
    pub pbCrtInverses: [PBYTE; 2usize],
    pub pbPrivExps: [PBYTE; 1usize],
    pub pbCrtPrivExps: [PBYTE; 2usize],
    pub pmModulus: PSYMCRYPT_MODULUS,
    pub pmPrimes: [PSYMCRYPT_MODULUS; 2usize],
    pub peCrtInverses: [PSYMCRYPT_MODELEMENT; 2usize],
    pub piPrivExps: [PSYMCRYPT_INT; 1usize],
    pub piCrtPrivExps: [PSYMCRYPT_INT; 2usize],
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RSAKEY"][::std::mem::size_of::<_SYMCRYPT_RSAKEY>() - 192usize];
    ["Alignment of _SYMCRYPT_RSAKEY"][::std::mem::align_of::<_SYMCRYPT_RSAKEY>() - 32usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::fAlgorithmInfo"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, fAlgorithmInfo) - 0usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::cbTotalSize"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, cbTotalSize) - 4usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::hasPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, hasPrivateKey) - 8usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nSetBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nSetBitsOfModulus) - 12usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nBitsOfModulus) - 16usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nDigitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nDigitsOfModulus) - 20usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nPubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nPubExp) - 24usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nPrimes) - 28usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nBitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nBitsOfPrimes) - 32usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nDigitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nDigitsOfPrimes) - 40usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::nMaxDigitsOfPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, nMaxDigitsOfPrimes) - 48usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::au64PubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, au64PubExp) - 56usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbPrimes) - 64usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbCrtInverses"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbCrtInverses) - 80usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbPrivExps) - 96usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pbCrtPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pbCrtPrivExps) - 104usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pmModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pmModulus) - 120usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::pmPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, pmPrimes) - 128usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::peCrtInverses"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, peCrtInverses) - 144usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::piPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, piPrivExps) - 160usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::piCrtPrivExps"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, piCrtPrivExps) - 168usize];
    ["Offset of field: _SYMCRYPT_RSAKEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_RSAKEY, magic) - 184usize];
};
impl Default for _SYMCRYPT_RSAKEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_RSAKEY = _SYMCRYPT_RSAKEY;
pub type PSYMCRYPT_RSAKEY = *mut SYMCRYPT_RSAKEY;
pub type PCSYMCRYPT_RSAKEY = *const SYMCRYPT_RSAKEY;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_TRIALDIVISION_PRIME {
    pub invMod2e64: UINT64,
    pub compareLimit: UINT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TRIALDIVISION_PRIME"]
        [::std::mem::size_of::<_SYMCRYPT_TRIALDIVISION_PRIME>() - 16usize];
    ["Alignment of _SYMCRYPT_TRIALDIVISION_PRIME"]
        [::std::mem::align_of::<_SYMCRYPT_TRIALDIVISION_PRIME>() - 8usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_PRIME::invMod2e64"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_PRIME, invMod2e64) - 0usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_PRIME::compareLimit"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_PRIME, compareLimit) - 8usize];
};
pub type SYMCRYPT_TRIALDIVISION_PRIME = _SYMCRYPT_TRIALDIVISION_PRIME;
pub type PSYMCRYPT_TRIALDIVISION_PRIME = *mut _SYMCRYPT_TRIALDIVISION_PRIME;
pub type PCSYMCRYPT_TRIALDIVISION_PRIME = *const SYMCRYPT_TRIALDIVISION_PRIME;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_TRIALDIVISION_GROUP {
    pub nPrimes: UINT32,
    pub factor: [UINT32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TRIALDIVISION_GROUP"]
        [::std::mem::size_of::<_SYMCRYPT_TRIALDIVISION_GROUP>() - 40usize];
    ["Alignment of _SYMCRYPT_TRIALDIVISION_GROUP"]
        [::std::mem::align_of::<_SYMCRYPT_TRIALDIVISION_GROUP>() - 4usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_GROUP::nPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_GROUP, nPrimes) - 0usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_GROUP::factor"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_GROUP, factor) - 4usize];
};
pub type SYMCRYPT_TRIALDIVISION_GROUP = _SYMCRYPT_TRIALDIVISION_GROUP;
pub type PSYMCRYPT_TRIALDIVISION_GROUP = *mut _SYMCRYPT_TRIALDIVISION_GROUP;
pub type PCSYMCRYPT_TRIALDIVISION_GROUP = *const SYMCRYPT_TRIALDIVISION_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_TRIALDIVISION_CONTEXT {
    pub nBytesAlloc: SIZE_T,
    pub maxTrialPrime: UINT32,
    pub pGroupList: PSYMCRYPT_TRIALDIVISION_GROUP,
    pub pPrimeList: PSYMCRYPT_TRIALDIVISION_PRIME,
    pub pPrimes: PUINT32,
    pub Primes3_5_17: [SYMCRYPT_TRIALDIVISION_PRIME; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_TRIALDIVISION_CONTEXT"]
        [::std::mem::size_of::<_SYMCRYPT_TRIALDIVISION_CONTEXT>() - 88usize];
    ["Alignment of _SYMCRYPT_TRIALDIVISION_CONTEXT"]
        [::std::mem::align_of::<_SYMCRYPT_TRIALDIVISION_CONTEXT>() - 8usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::nBytesAlloc"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, nBytesAlloc) - 0usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::maxTrialPrime"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, maxTrialPrime) - 8usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::pGroupList"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, pGroupList) - 16usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::pPrimeList"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, pPrimeList) - 24usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::pPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, pPrimes) - 32usize];
    ["Offset of field: _SYMCRYPT_TRIALDIVISION_CONTEXT::Primes3_5_17"]
        [::std::mem::offset_of!(_SYMCRYPT_TRIALDIVISION_CONTEXT, Primes3_5_17) - 40usize];
};
impl Default for _SYMCRYPT_TRIALDIVISION_CONTEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_TRIALDIVISION_CONTEXT = _SYMCRYPT_TRIALDIVISION_CONTEXT;
pub type PSYMCRYPT_TRIALDIVISION_CONTEXT = *mut _SYMCRYPT_TRIALDIVISION_CONTEXT;
pub type PCSYMCRYPT_TRIALDIVISION_CONTEXT = *const SYMCRYPT_TRIALDIVISION_CONTEXT;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_DLGROUP {
    pub cbTotalSize: UINT32,
    pub fHasPrimeQ: BOOLEAN,
    pub nBitsOfP: UINT32,
    pub cbPrimeP: UINT32,
    pub nDigitsOfP: UINT32,
    pub nMaxBitsOfP: UINT32,
    pub nBitsOfQ: UINT32,
    pub cbPrimeQ: UINT32,
    pub nDigitsOfQ: UINT32,
    pub nMaxBitsOfQ: UINT32,
    pub isSafePrimeGroup: BOOLEAN,
    pub nMinBitsPriv: UINT32,
    pub nDefaultBitsPriv: UINT32,
    pub nBitsOfSeed: UINT32,
    pub cbSeed: UINT32,
    pub eFipsStandard: SYMCRYPT_DLGROUP_FIPS,
    pub pHashAlgorithm: PCSYMCRYPT_HASH,
    pub dwGenCounter: UINT32,
    pub bIndexGenG: BYTE,
    pub pbQ: PBYTE,
    pub pmP: PSYMCRYPT_MODULUS,
    pub pmQ: PSYMCRYPT_MODULUS,
    pub peG: PSYMCRYPT_MODELEMENT,
    pub pbSeed: PBYTE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DLGROUP"][::std::mem::size_of::<_SYMCRYPT_DLGROUP>() - 128usize];
    ["Alignment of _SYMCRYPT_DLGROUP"][::std::mem::align_of::<_SYMCRYPT_DLGROUP>() - 32usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::cbTotalSize"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, cbTotalSize) - 0usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::fHasPrimeQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, fHasPrimeQ) - 4usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nBitsOfP"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nBitsOfP) - 8usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::cbPrimeP"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, cbPrimeP) - 12usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nDigitsOfP"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nDigitsOfP) - 16usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nMaxBitsOfP"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nMaxBitsOfP) - 20usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nBitsOfQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nBitsOfQ) - 24usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::cbPrimeQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, cbPrimeQ) - 28usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nDigitsOfQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nDigitsOfQ) - 32usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nMaxBitsOfQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nMaxBitsOfQ) - 36usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::isSafePrimeGroup"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, isSafePrimeGroup) - 40usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nMinBitsPriv"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nMinBitsPriv) - 44usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nDefaultBitsPriv"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nDefaultBitsPriv) - 48usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::nBitsOfSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, nBitsOfSeed) - 52usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::cbSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, cbSeed) - 56usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::eFipsStandard"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, eFipsStandard) - 60usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::pHashAlgorithm"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, pHashAlgorithm) - 64usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::dwGenCounter"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, dwGenCounter) - 72usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::bIndexGenG"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, bIndexGenG) - 76usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::pbQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, pbQ) - 80usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::pmP"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, pmP) - 88usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::pmQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, pmQ) - 96usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::peG"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, peG) - 104usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::pbSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, pbSeed) - 112usize];
    ["Offset of field: _SYMCRYPT_DLGROUP::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_DLGROUP, magic) - 120usize];
};
impl Default for _SYMCRYPT_DLGROUP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_DLGROUP = _SYMCRYPT_DLGROUP;
pub type PSYMCRYPT_DLGROUP = *mut SYMCRYPT_DLGROUP;
pub type PCSYMCRYPT_DLGROUP = *const SYMCRYPT_DLGROUP;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_DLKEY {
    pub fAlgorithmInfo: UINT32,
    pub fHasPrivateKey: BOOLEAN,
    pub fPrivateModQ: BOOLEAN,
    pub nBitsPriv: UINT32,
    pub pDlgroup: PCSYMCRYPT_DLGROUP,
    pub pbPrivate: PBYTE,
    pub pePublicKey: PSYMCRYPT_MODELEMENT,
    pub piPrivateKey: PSYMCRYPT_INT,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_DLKEY"][::std::mem::size_of::<_SYMCRYPT_DLKEY>() - 64usize];
    ["Alignment of _SYMCRYPT_DLKEY"][::std::mem::align_of::<_SYMCRYPT_DLKEY>() - 32usize];
    ["Offset of field: _SYMCRYPT_DLKEY::fAlgorithmInfo"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, fAlgorithmInfo) - 0usize];
    ["Offset of field: _SYMCRYPT_DLKEY::fHasPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, fHasPrivateKey) - 4usize];
    ["Offset of field: _SYMCRYPT_DLKEY::fPrivateModQ"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, fPrivateModQ) - 5usize];
    ["Offset of field: _SYMCRYPT_DLKEY::nBitsPriv"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, nBitsPriv) - 8usize];
    ["Offset of field: _SYMCRYPT_DLKEY::pDlgroup"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, pDlgroup) - 16usize];
    ["Offset of field: _SYMCRYPT_DLKEY::pbPrivate"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, pbPrivate) - 24usize];
    ["Offset of field: _SYMCRYPT_DLKEY::pePublicKey"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, pePublicKey) - 32usize];
    ["Offset of field: _SYMCRYPT_DLKEY::piPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, piPrivateKey) - 40usize];
    ["Offset of field: _SYMCRYPT_DLKEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_DLKEY, magic) - 48usize];
};
impl Default for _SYMCRYPT_DLKEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_DLKEY = _SYMCRYPT_DLKEY;
pub type PSYMCRYPT_DLKEY = *mut SYMCRYPT_DLKEY;
pub type PCSYMCRYPT_DLKEY = *const SYMCRYPT_DLKEY;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_INVALID:
    _SYMCRYPT_ECPOINT_COORDINATES = 0;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_SINGLE:
    _SYMCRYPT_ECPOINT_COORDINATES = 17;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_AFFINE:
    _SYMCRYPT_ECPOINT_COORDINATES = 34;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 51;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_JACOBIAN:
    _SYMCRYPT_ECPOINT_COORDINATES = 67;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_EXTENDED_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 84;
pub const _SYMCRYPT_ECPOINT_COORDINATES_SYMCRYPT_ECPOINT_COORDINATES_SINGLE_PROJECTIVE:
    _SYMCRYPT_ECPOINT_COORDINATES = 98;
pub type _SYMCRYPT_ECPOINT_COORDINATES = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECPOINT_COORDINATES as SYMCRYPT_ECPOINT_COORDINATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECURVE_INFO_PRECOMP {
    pub window: UINT32,
    pub nPrecompPoints: UINT32,
    pub nRecodedDigits: UINT32,
    pub poPrecompPoints: [PSYMCRYPT_ECPOINT; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE_INFO_PRECOMP"]
        [::std::mem::size_of::<_SYMCRYPT_ECURVE_INFO_PRECOMP>() - 528usize];
    ["Alignment of _SYMCRYPT_ECURVE_INFO_PRECOMP"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE_INFO_PRECOMP>() - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::window"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, window) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::nPrecompPoints"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, nPrecompPoints) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::nRecodedDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, nRecodedDigits) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_INFO_PRECOMP::poPrecompPoints"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_INFO_PRECOMP, poPrecompPoints) - 16usize];
};
impl Default for _SYMCRYPT_ECURVE_INFO_PRECOMP {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE_INFO_PRECOMP = _SYMCRYPT_ECURVE_INFO_PRECOMP;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_SHORT_WEIERSTRASS:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 1;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_TWISTED_EDWARDS:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 2;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_MONTGOMERY:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 3;
pub const _SYMCRYPT_INTERNAL_ECURVE_TYPE_SYMCRYPT_INTERNAL_ECURVE_TYPE_SHORT_WEIERSTRASS_AM3:
    _SYMCRYPT_INTERNAL_ECURVE_TYPE = 4;
pub type _SYMCRYPT_INTERNAL_ECURVE_TYPE = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_INTERNAL_ECURVE_TYPE as SYMCRYPT_INTERNAL_ECURVE_TYPE;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct _SYMCRYPT_ECURVE {
    pub version: UINT32,
    pub type_: SYMCRYPT_INTERNAL_ECURVE_TYPE,
    pub eCoordinates: SYMCRYPT_ECPOINT_COORDINATES,
    pub FModBitsize: UINT32,
    pub FModDigits: UINT32,
    pub FModBytesize: UINT32,
    pub GOrdBitsize: UINT32,
    pub GOrdDigits: UINT32,
    pub GOrdBytesize: UINT32,
    pub cbModElement: UINT32,
    pub cbAlloc: UINT32,
    pub cbScratchCommon: UINT32,
    pub cbScratchScalar: UINT32,
    pub cbScratchScalarMulti: UINT32,
    pub cbScratchGetSetValue: UINT32,
    pub cbScratchEckey: UINT32,
    pub coFactorPower: UINT32,
    pub PrivateKeyDefaultFormat: UINT32,
    pub HighBitRestrictionNumOfBits: UINT32,
    pub HighBitRestrictionPosition: UINT32,
    pub HighBitRestrictionValue: UINT32,
    pub info: _SYMCRYPT_ECURVE__bindgen_ty_1,
    pub FMod: PSYMCRYPT_MODULUS,
    pub GOrd: PSYMCRYPT_MODULUS,
    pub A: PSYMCRYPT_MODELEMENT,
    pub B: PSYMCRYPT_MODELEMENT,
    pub G: PSYMCRYPT_ECPOINT,
    pub H: PSYMCRYPT_INT,
    pub magic: SIZE_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYMCRYPT_ECURVE__bindgen_ty_1 {
    pub sw: SYMCRYPT_ECURVE_INFO_PRECOMP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE__bindgen_ty_1"]
        [::std::mem::size_of::<_SYMCRYPT_ECURVE__bindgen_ty_1>() - 528usize];
    ["Alignment of _SYMCRYPT_ECURVE__bindgen_ty_1"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE__bindgen_ty_1::sw"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE__bindgen_ty_1, sw) - 0usize];
};
impl Default for _SYMCRYPT_ECURVE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE"][::std::mem::size_of::<_SYMCRYPT_ECURVE>() - 672usize];
    ["Alignment of _SYMCRYPT_ECURVE"][::std::mem::align_of::<_SYMCRYPT_ECURVE>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECURVE::version"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, version) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, type_) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE::eCoordinates"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, eCoordinates) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModBitsize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModBitsize) - 12usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModDigits) - 16usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FModBytesize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FModBytesize) - 20usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdBitsize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdBitsize) - 24usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdDigits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdDigits) - 28usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrdBytesize"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrdBytesize) - 32usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbModElement"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbModElement) - 36usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbAlloc"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbAlloc) - 40usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchCommon"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchCommon) - 44usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchScalar"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchScalar) - 48usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchScalarMulti"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchScalarMulti) - 52usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchGetSetValue"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchGetSetValue) - 56usize];
    ["Offset of field: _SYMCRYPT_ECURVE::cbScratchEckey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, cbScratchEckey) - 60usize];
    ["Offset of field: _SYMCRYPT_ECURVE::coFactorPower"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, coFactorPower) - 64usize];
    ["Offset of field: _SYMCRYPT_ECURVE::PrivateKeyDefaultFormat"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, PrivateKeyDefaultFormat) - 68usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionNumOfBits"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionNumOfBits) - 72usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionPosition"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionPosition) - 76usize];
    ["Offset of field: _SYMCRYPT_ECURVE::HighBitRestrictionValue"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, HighBitRestrictionValue) - 80usize];
    ["Offset of field: _SYMCRYPT_ECURVE::info"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, info) - 88usize];
    ["Offset of field: _SYMCRYPT_ECURVE::FMod"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, FMod) - 616usize];
    ["Offset of field: _SYMCRYPT_ECURVE::GOrd"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, GOrd) - 624usize];
    ["Offset of field: _SYMCRYPT_ECURVE::A"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, A) - 632usize];
    ["Offset of field: _SYMCRYPT_ECURVE::B"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, B) - 640usize];
    ["Offset of field: _SYMCRYPT_ECURVE::G"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, G) - 648usize];
    ["Offset of field: _SYMCRYPT_ECURVE::H"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, H) - 656usize];
    ["Offset of field: _SYMCRYPT_ECURVE::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE, magic) - 664usize];
};
impl Default for _SYMCRYPT_ECURVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE = _SYMCRYPT_ECURVE;
pub type PSYMCRYPT_ECURVE = *mut SYMCRYPT_ECURVE;
pub type PCSYMCRYPT_ECURVE = *const SYMCRYPT_ECURVE;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECPOINT {
    pub normalized: BOOLEAN,
    pub pCurve: PCSYMCRYPT_ECURVE,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECPOINT"][::std::mem::size_of::<_SYMCRYPT_ECPOINT>() - 32usize];
    ["Alignment of _SYMCRYPT_ECPOINT"][::std::mem::align_of::<_SYMCRYPT_ECPOINT>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::normalized"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, normalized) - 0usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::pCurve"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, pCurve) - 8usize];
    ["Offset of field: _SYMCRYPT_ECPOINT::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECPOINT, magic) - 16usize];
};
impl Default for _SYMCRYPT_ECPOINT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECKEY {
    pub fAlgorithmInfo: UINT32,
    pub hasPrivateKey: BOOLEAN,
    pub pCurve: PCSYMCRYPT_ECURVE,
    pub poPublicKey: PSYMCRYPT_ECPOINT,
    pub piPrivateKey: PSYMCRYPT_INT,
    pub magic: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECKEY"][::std::mem::size_of::<_SYMCRYPT_ECKEY>() - 64usize];
    ["Alignment of _SYMCRYPT_ECKEY"][::std::mem::align_of::<_SYMCRYPT_ECKEY>() - 32usize];
    ["Offset of field: _SYMCRYPT_ECKEY::fAlgorithmInfo"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, fAlgorithmInfo) - 0usize];
    ["Offset of field: _SYMCRYPT_ECKEY::hasPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, hasPrivateKey) - 4usize];
    ["Offset of field: _SYMCRYPT_ECKEY::pCurve"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, pCurve) - 8usize];
    ["Offset of field: _SYMCRYPT_ECKEY::poPublicKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, poPublicKey) - 16usize];
    ["Offset of field: _SYMCRYPT_ECKEY::piPrivateKey"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, piPrivateKey) - 24usize];
    ["Offset of field: _SYMCRYPT_ECKEY::magic"]
        [::std::mem::offset_of!(_SYMCRYPT_ECKEY, magic) - 32usize];
};
impl Default for _SYMCRYPT_ECKEY {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECKEY = _SYMCRYPT_ECKEY;
pub type PSYMCRYPT_ECKEY = *mut SYMCRYPT_ECKEY;
pub type PCSYMCRYPT_ECKEY = *const SYMCRYPT_ECKEY;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_802_11_SAE_CUSTOM_STATE {
    pub pCurve: PSYMCRYPT_ECURVE,
    pub macAlgorithm: PCSYMCRYPT_MAC,
    pub peRand: PSYMCRYPT_MODELEMENT,
    pub peMask: PSYMCRYPT_MODELEMENT,
    pub poPWE: PSYMCRYPT_ECPOINT,
    pub counter: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_802_11_SAE_CUSTOM_STATE"]
        [::std::mem::size_of::<_SYMCRYPT_802_11_SAE_CUSTOM_STATE>() - 48usize];
    ["Alignment of _SYMCRYPT_802_11_SAE_CUSTOM_STATE"]
        [::std::mem::align_of::<_SYMCRYPT_802_11_SAE_CUSTOM_STATE>() - 16usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::pCurve"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, pCurve) - 0usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::macAlgorithm"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, macAlgorithm) - 8usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::peRand"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, peRand) - 16usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::peMask"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, peMask) - 24usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::poPWE"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, poPWE) - 32usize];
    ["Offset of field: _SYMCRYPT_802_11_SAE_CUSTOM_STATE::counter"]
        [::std::mem::offset_of!(_SYMCRYPT_802_11_SAE_CUSTOM_STATE, counter) - 40usize];
};
impl Default for _SYMCRYPT_802_11_SAE_CUSTOM_STATE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_EXTENDED_SAVE_DATA {
    _unused: [u8; 0],
}
pub type SYMCRYPT_EXTENDED_SAVE_DATA = _SYMCRYPT_EXTENDED_SAVE_DATA;
pub type PSYMCRYPT_EXTENDED_SAVE_DATA = *mut _SYMCRYPT_EXTENDED_SAVE_DATA;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_NONE:
    _SYMCRYPT_SELFTEST_ALGORITHM = 0;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_STARTUP:
    _SYMCRYPT_SELFTEST_ALGORITHM = 1;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_DSA:
    _SYMCRYPT_SELFTEST_ALGORITHM = 2;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_ECDSA:
    _SYMCRYPT_SELFTEST_ALGORITHM = 4;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_RSA:
    _SYMCRYPT_SELFTEST_ALGORITHM = 8;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_DH:
    _SYMCRYPT_SELFTEST_ALGORITHM = 16;
pub const _SYMCRYPT_SELFTEST_ALGORITHM_SYMCRYPT_SELFTEST_ALGORITHM_ECDH:
    _SYMCRYPT_SELFTEST_ALGORITHM = 32;
pub type _SYMCRYPT_SELFTEST_ALGORITHM = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_SELFTEST_ALGORITHM as SYMCRYPT_SELFTEST_ALGORITHM;
pub const _SYMCRYPT_NUMBER_FORMAT_SYMCRYPT_NUMBER_FORMAT_LSB_FIRST: _SYMCRYPT_NUMBER_FORMAT = 1;
pub const _SYMCRYPT_NUMBER_FORMAT_SYMCRYPT_NUMBER_FORMAT_MSB_FIRST: _SYMCRYPT_NUMBER_FORMAT = 2;
pub type _SYMCRYPT_NUMBER_FORMAT = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_NUMBER_FORMAT as SYMCRYPT_NUMBER_FORMAT;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_RSA_PARAMS {
    pub version: UINT32,
    pub nBitsOfModulus: UINT32,
    pub nPrimes: UINT32,
    pub nPubExp: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_RSA_PARAMS"][::std::mem::size_of::<_SYMCRYPT_RSA_PARAMS>() - 16usize];
    ["Alignment of _SYMCRYPT_RSA_PARAMS"][::std::mem::align_of::<_SYMCRYPT_RSA_PARAMS>() - 4usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::version"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, version) - 0usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nBitsOfModulus"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nBitsOfModulus) - 4usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nPrimes"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nPrimes) - 8usize];
    ["Offset of field: _SYMCRYPT_RSA_PARAMS::nPubExp"]
        [::std::mem::offset_of!(_SYMCRYPT_RSA_PARAMS, nPubExp) - 12usize];
};
pub type SYMCRYPT_RSA_PARAMS = _SYMCRYPT_RSA_PARAMS;
pub type PSYMCRYPT_RSA_PARAMS = *mut _SYMCRYPT_RSA_PARAMS;
pub type PCSYMCRYPT_RSA_PARAMS = *const SYMCRYPT_RSA_PARAMS;
pub const _SYMCRYPT_ECURVE_GEN_ALG_ID_SYMCRYPT_ECURVE_GEN_ALG_ID_NULL: _SYMCRYPT_ECURVE_GEN_ALG_ID =
    0;
pub type _SYMCRYPT_ECURVE_GEN_ALG_ID = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECURVE_GEN_ALG_ID as SYMCRYPT_ECURVE_GEN_ALG_ID;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION {
    pub PrivateKeyDefaultFormat: UINT32,
    pub HighBitRestrictionNumOfBits: UINT32,
    pub HighBitRestrictionPosition: UINT32,
    pub HighBitRestrictionValue: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION"]
        [::std::mem::size_of::<_SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION>() - 16usize];
    ["Alignment of _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION>() - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION::PrivateKeyDefaultFormat"][::std::mem::offset_of!(
        _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION,
        PrivateKeyDefaultFormat
    ) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION::HighBitRestrictionNumOfBits"][::std::mem::offset_of!(
        _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION,
        HighBitRestrictionNumOfBits
    )
        - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION::HighBitRestrictionPosition"][::std::mem::offset_of!(
        _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION,
        HighBitRestrictionPosition
    )
        - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION::HighBitRestrictionValue"][::std::mem::offset_of!(
        _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION,
        HighBitRestrictionValue
    ) - 12usize];
};
pub type SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION = _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION;
pub type PSYMCRYPT_ECURVE_PARAMS_V2_EXTENSION = *mut _SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION;
pub type PCSYMCRYPT_ECURVE_PARAMS_V2_EXTENSION = *const SYMCRYPT_ECURVE_PARAMS_V2_EXTENSION;
pub const _SYMCRYPT_ECKEY_PRIVATE_FORMAT_SYMCRYPT_ECKEY_PRIVATE_FORMAT_NULL:
    _SYMCRYPT_ECKEY_PRIVATE_FORMAT = 0;
pub const _SYMCRYPT_ECKEY_PRIVATE_FORMAT_SYMCRYPT_ECKEY_PRIVATE_FORMAT_CANONICAL:
    _SYMCRYPT_ECKEY_PRIVATE_FORMAT = 1;
pub const _SYMCRYPT_ECKEY_PRIVATE_FORMAT_SYMCRYPT_ECKEY_PRIVATE_FORMAT_DIVH:
    _SYMCRYPT_ECKEY_PRIVATE_FORMAT = 2;
pub const _SYMCRYPT_ECKEY_PRIVATE_FORMAT_SYMCRYPT_ECKEY_PRIVATE_FORMAT_DIVH_TIMESH:
    _SYMCRYPT_ECKEY_PRIVATE_FORMAT = 3;
pub type _SYMCRYPT_ECKEY_PRIVATE_FORMAT = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECKEY_PRIVATE_FORMAT as SYMCRYPT_ECKEY_PRIVATE_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_ECURVE_PARAMS {
    pub version: UINT32,
    pub type_: SYMCRYPT_ECURVE_TYPE,
    pub algId: SYMCRYPT_ECURVE_GEN_ALG_ID,
    pub cbFieldLength: UINT32,
    pub cbSubgroupOrder: UINT32,
    pub cbCofactor: UINT32,
    pub cbSeed: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_ECURVE_PARAMS"][::std::mem::size_of::<_SYMCRYPT_ECURVE_PARAMS>() - 28usize];
    ["Alignment of _SYMCRYPT_ECURVE_PARAMS"]
        [::std::mem::align_of::<_SYMCRYPT_ECURVE_PARAMS>() - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::version"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, version) - 0usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::type_"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, type_) - 4usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::algId"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, algId) - 8usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbFieldLength"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbFieldLength) - 12usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbSubgroupOrder"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbSubgroupOrder) - 16usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbCofactor"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbCofactor) - 20usize];
    ["Offset of field: _SYMCRYPT_ECURVE_PARAMS::cbSeed"]
        [::std::mem::offset_of!(_SYMCRYPT_ECURVE_PARAMS, cbSeed) - 24usize];
};
impl Default for _SYMCRYPT_ECURVE_PARAMS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_ECURVE_PARAMS = _SYMCRYPT_ECURVE_PARAMS;
pub type PSYMCRYPT_ECURVE_PARAMS = *mut _SYMCRYPT_ECURVE_PARAMS;
pub type PCSYMCRYPT_ECURVE_PARAMS = *const SYMCRYPT_ECURVE_PARAMS;
pub const _SYMCRYPT_ECPOINT_FORMAT_SYMCRYPT_ECPOINT_FORMAT_X: _SYMCRYPT_ECPOINT_FORMAT = 1;
pub const _SYMCRYPT_ECPOINT_FORMAT_SYMCRYPT_ECPOINT_FORMAT_XY: _SYMCRYPT_ECPOINT_FORMAT = 2;
pub type _SYMCRYPT_ECPOINT_FORMAT = ::std::os::raw::c_int;
pub use self::_SYMCRYPT_ECPOINT_FORMAT as SYMCRYPT_ECPOINT_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYMCRYPT_OID {
    pub cbOID: UINT32,
    pub pbOID: PCBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_OID"][::std::mem::size_of::<_SYMCRYPT_OID>() - 16usize];
    ["Alignment of _SYMCRYPT_OID"][::std::mem::align_of::<_SYMCRYPT_OID>() - 8usize];
    ["Offset of field: _SYMCRYPT_OID::cbOID"]
        [::std::mem::offset_of!(_SYMCRYPT_OID, cbOID) - 0usize];
    ["Offset of field: _SYMCRYPT_OID::pbOID"]
        [::std::mem::offset_of!(_SYMCRYPT_OID, pbOID) - 8usize];
};
impl Default for _SYMCRYPT_OID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type SYMCRYPT_OID = _SYMCRYPT_OID;
pub type PSYMCRYPT_OID = *mut _SYMCRYPT_OID;
pub type PCSYMCRYPT_OID = *const SYMCRYPT_OID;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _SYMCRYPT_UINT32_MAP {
    pub from: UINT32,
    pub to: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYMCRYPT_UINT32_MAP"][::std::mem::size_of::<_SYMCRYPT_UINT32_MAP>() - 8usize];
    ["Alignment of _SYMCRYPT_UINT32_MAP"][::std::mem::align_of::<_SYMCRYPT_UINT32_MAP>() - 4usize];
    ["Offset of field: _SYMCRYPT_UINT32_MAP::from"]
        [::std::mem::offset_of!(_SYMCRYPT_UINT32_MAP, from) - 0usize];
    ["Offset of field: _SYMCRYPT_UINT32_MAP::to"]
        [::std::mem::offset_of!(_SYMCRYPT_UINT32_MAP, to) - 4usize];
};
pub type SYMCRYPT_UINT32_MAP = _SYMCRYPT_UINT32_MAP;
pub type PSYMCRYPT_UINT32_MAP = *mut _SYMCRYPT_UINT32_MAP;
pub type PCSYMCRYPT_UINT32_MAP = *const SYMCRYPT_UINT32_MAP;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
