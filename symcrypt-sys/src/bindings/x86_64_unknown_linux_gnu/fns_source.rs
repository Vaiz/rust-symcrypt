/* automatically generated by rust-bindgen 0.71.1 */

use super::types::*;

unsafe extern "C" {
    pub fn SymCryptWipe(pbData: PVOID, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptLoadMsbFirstUint64(
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        pDst: PUINT64,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptStoreMsbFirstUint64(src: UINT64, pbDst: PBYTE, cbDst: SIZE_T) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptModuleInit(api: UINT32, minor: UINT32);
}
unsafe extern "C" {
    pub fn SymCryptMd5(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptMd5Init(pState: PSYMCRYPT_MD5_STATE);
}
unsafe extern "C" {
    pub fn SymCryptMd5Append(pState: PSYMCRYPT_MD5_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptMd5Result(pState: PSYMCRYPT_MD5_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptMd5StateCopy(pSrc: PCSYMCRYPT_MD5_STATE, pDst: PSYMCRYPT_MD5_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha1(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha1Init(pState: PSYMCRYPT_SHA1_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha1Append(pState: PSYMCRYPT_SHA1_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha1Result(pState: PSYMCRYPT_SHA1_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha1StateCopy(pSrc: PCSYMCRYPT_SHA1_STATE, pDst: PSYMCRYPT_SHA1_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha256(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha256Init(pState: PSYMCRYPT_SHA256_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha256Append(pState: PSYMCRYPT_SHA256_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha256Result(pState: PSYMCRYPT_SHA256_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha256StateCopy(pSrc: PCSYMCRYPT_SHA256_STATE, pDst: PSYMCRYPT_SHA256_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha384(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha384Init(pState: PSYMCRYPT_SHA384_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha384Append(pState: PSYMCRYPT_SHA384_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha384Result(pState: PSYMCRYPT_SHA384_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha384StateCopy(pSrc: PCSYMCRYPT_SHA384_STATE, pDst: PSYMCRYPT_SHA384_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha512(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha512Init(pState: PSYMCRYPT_SHA512_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha512Append(pState: PSYMCRYPT_SHA512_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha512Result(pState: PSYMCRYPT_SHA512_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha512StateCopy(pSrc: PCSYMCRYPT_SHA512_STATE, pDst: PSYMCRYPT_SHA512_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Init(pState: PSYMCRYPT_SHA3_256_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Append(pState: PSYMCRYPT_SHA3_256_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256Result(pState: PSYMCRYPT_SHA3_256_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_256StateCopy(
        pSrc: PCSYMCRYPT_SHA3_256_STATE,
        pDst: PSYMCRYPT_SHA3_256_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptSha3_384(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Init(pState: PSYMCRYPT_SHA3_384_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Append(pState: PSYMCRYPT_SHA3_384_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384Result(pState: PSYMCRYPT_SHA3_384_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_384StateCopy(
        pSrc: PCSYMCRYPT_SHA3_384_STATE,
        pDst: PSYMCRYPT_SHA3_384_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptSha3_512(pbData: PCBYTE, cbData: SIZE_T, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Init(pState: PSYMCRYPT_SHA3_512_STATE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Append(pState: PSYMCRYPT_SHA3_512_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512Result(pState: PSYMCRYPT_SHA3_512_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptSha3_512StateCopy(
        pSrc: PCSYMCRYPT_SHA3_512_STATE,
        pDst: PSYMCRYPT_SHA3_512_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5(
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5StateCopy(
        pSrc: PCSYMCRYPT_HMAC_MD5_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_MD5_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Init(
        pState: PSYMCRYPT_HMAC_MD5_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_MD5_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Append(pState: PSYMCRYPT_HMAC_MD5_STATE, pbData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptHmacMd5Result(pState: PSYMCRYPT_HMAC_MD5_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA1_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA1_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Init(
        pState: PSYMCRYPT_HMAC_SHA1_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA1_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Append(
        pState: PSYMCRYPT_HMAC_SHA1_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha1Result(pState: PSYMCRYPT_HMAC_SHA1_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA256_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA256_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Init(
        pState: PSYMCRYPT_HMAC_SHA256_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA256_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Append(
        pState: PSYMCRYPT_HMAC_SHA256_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha256Result(pState: PSYMCRYPT_HMAC_SHA256_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA384_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA384_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Init(
        pState: PSYMCRYPT_HMAC_SHA384_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA384_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Append(
        pState: PSYMCRYPT_HMAC_SHA384_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha384Result(pState: PSYMCRYPT_HMAC_SHA384_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512ExpandKey(
        pExpandedKey: PSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512(
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pbData: PCBYTE,
        cbData: SIZE_T,
        pbResult: PBYTE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512StateCopy(
        pSrc: PCSYMCRYPT_HMAC_SHA512_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
        pDst: PSYMCRYPT_HMAC_SHA512_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Init(
        pState: PSYMCRYPT_HMAC_SHA512_STATE,
        pExpandedKey: PCSYMCRYPT_HMAC_SHA512_EXPANDED_KEY,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Append(
        pState: PSYMCRYPT_HMAC_SHA512_STATE,
        pbData: PCBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptHmacSha512Result(pState: PSYMCRYPT_HMAC_SHA512_STATE, pbResult: PBYTE);
}
unsafe extern "C" {
    pub fn SymCryptChaCha20Poly1305Encrypt(
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptChaCha20Poly1305Decrypt(
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptAesExpandKey(
        pExpandedKey: PSYMCRYPT_AES_EXPANDED_KEY,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptAesCbcEncrypt(
        pExpandedKey: PCSYMCRYPT_AES_EXPANDED_KEY,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptAesCbcDecrypt(
        pExpandedKey: PCSYMCRYPT_AES_EXPANDED_KEY,
        pbChainingValue: PBYTE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmValidateParameters(
        pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
        cbNonce: SIZE_T,
        cbAssociatedData: UINT64,
        cbData: UINT64,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmExpandKey(
        pExpandedKey: PSYMCRYPT_GCM_EXPANDED_KEY,
        pBlockCipher: PCSYMCRYPT_BLOCKCIPHER,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmEncrypt(
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PBYTE,
        cbTag: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmDecrypt(
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
        pbAuthData: PCBYTE,
        cbAuthData: SIZE_T,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptGcmInit(
        pState: PSYMCRYPT_GCM_STATE,
        pExpandedKey: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pbNonce: PCBYTE,
        cbNonce: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmStateCopy(
        pSrc: PCSYMCRYPT_GCM_STATE,
        pExpandedKeyCopy: PCSYMCRYPT_GCM_EXPANDED_KEY,
        pDst: PSYMCRYPT_GCM_STATE,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmAuthPart(pState: PSYMCRYPT_GCM_STATE, pbAuthData: PCBYTE, cbData: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptGcmEncryptPart(
        pState: PSYMCRYPT_GCM_STATE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmEncryptFinal(pState: PSYMCRYPT_GCM_STATE, pbTag: PBYTE, cbTag: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptGcmDecryptPart(
        pState: PSYMCRYPT_GCM_STATE,
        pbSrc: PCBYTE,
        pbDst: PBYTE,
        cbData: SIZE_T,
    );
}
unsafe extern "C" {
    pub fn SymCryptGcmDecryptFinal(
        pState: PSYMCRYPT_GCM_STATE,
        pbTag: PCBYTE,
        cbTag: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2ExpandKey(
        pExpandedKey: PSYMCRYPT_TLSPRF1_2_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2Derive(
        pExpandedKey: PCSYMCRYPT_TLSPRF1_2_EXPANDED_KEY,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        pbSeed: PCBYTE,
        cbSeed: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptTlsPrf1_2(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbKey: PCBYTE,
        cbKey: SIZE_T,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        pbSeed: PCBYTE,
        cbSeed: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfExpandKey(
        pExpandedKey: PSYMCRYPT_HKDF_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfExtractPrk(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
        pbPrk: PBYTE,
        cbPrk: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfPrkExpandKey(
        pExpandedKey: PSYMCRYPT_HKDF_EXPANDED_KEY,
        macAlgorithm: PCSYMCRYPT_MAC,
        pbPrk: PCBYTE,
        cbPrk: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfDerive(
        pExpandedKey: PCSYMCRYPT_HKDF_EXPANDED_KEY,
        pbInfo: PCBYTE,
        cbInfo: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdf(
        macAlgorithm: PCSYMCRYPT_MAC,
        pbIkm: PCBYTE,
        cbIkm: SIZE_T,
        pbSalt: PCBYTE,
        cbSalt: SIZE_T,
        pbInfo: PCBYTE,
        cbInfo: SIZE_T,
        pbResult: PBYTE,
        cbResult: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptHkdfSelfTest();
}
unsafe extern "C" {
    pub fn SymCryptRandom(pbRandom: PBYTE, cbRandom: SIZE_T);
}
unsafe extern "C" {
    pub fn SymCryptRsakeyAllocate(
        pParams: PCSYMCRYPT_RSA_PARAMS,
        flags: UINT32,
    ) -> PSYMCRYPT_RSAKEY;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyFree(pkObj: PSYMCRYPT_RSAKEY);
}
unsafe extern "C" {
    pub fn SymCryptEcurveAllocate(
        pParams: PCSYMCRYPT_ECURVE_PARAMS,
        flags: UINT32,
    ) -> PSYMCRYPT_ECURVE;
}
unsafe extern "C" {
    pub fn SymCryptEcurveFree(pCurve: PSYMCRYPT_ECURVE);
}
unsafe extern "C" {
    pub fn SymCryptEckeyAllocate(pCurve: PCSYMCRYPT_ECURVE) -> PSYMCRYPT_ECKEY;
}
unsafe extern "C" {
    pub fn SymCryptEckeyFree(pkObj: PSYMCRYPT_ECKEY);
}
unsafe extern "C" {
    pub fn SymCryptRsakeyHasPrivateKey(pkRsakey: PCSYMCRYPT_RSAKEY) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofModulus(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyModulusBits(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofPublicExponent(pRsakey: PCSYMCRYPT_RSAKEY, index: UINT32) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySizeofPrime(pkRsakey: PCSYMCRYPT_RSAKEY, index: UINT32) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetNumberOfPublicExponents(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetNumberOfPrimes(pkRsakey: PCSYMCRYPT_RSAKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGenerate(
        pkRsakey: PSYMCRYPT_RSAKEY,
        pu64PubExp: PCUINT64,
        nPubExp: UINT32,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeySetValue(
        pbModulus: PCBYTE,
        cbModulus: SIZE_T,
        pu64PubExp: PCUINT64,
        nPubExp: UINT32,
        ppPrimes: *mut PCBYTE,
        pcbPrimes: *mut SIZE_T,
        nPrimes: UINT32,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pkRsakey: PSYMCRYPT_RSAKEY,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetValue(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbModulus: PBYTE,
        cbModulus: SIZE_T,
        pu64PubExp: PUINT64,
        nPubExp: UINT32,
        ppPrimes: *mut PBYTE,
        pcbPrimes: *mut SIZE_T,
        nPrimes: UINT32,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyGetCrtValue(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        ppCrtExponents: *mut PBYTE,
        pcbCrtExponents: *mut SIZE_T,
        nCrtExponents: UINT32,
        pbCrtCoefficient: PBYTE,
        cbCrtCoefficient: SIZE_T,
        pbPrivateExponent: PBYTE,
        cbPrivateExponent: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsakeyExtendKeyUsage(
        pkRsakey: PSYMCRYPT_RSAKEY,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcurveSizeofFieldElement(pCurve: PCSYMCRYPT_ECURVE) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptEckeySizeofPublicKey(
        pkEckey: PCSYMCRYPT_ECKEY,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
    ) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptEckeySizeofPrivateKey(pkEckey: PCSYMCRYPT_ECKEY) -> UINT32;
}
unsafe extern "C" {
    pub fn SymCryptEckeySetValue(
        pbPrivateKey: PCBYTE,
        cbPrivateKey: SIZE_T,
        pbPublicKey: PCBYTE,
        cbPublicKey: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
        flags: UINT32,
        pEckey: PSYMCRYPT_ECKEY,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEckeySetRandom(flags: UINT32, pEckey: PSYMCRYPT_ECKEY) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEckeyGetValue(
        pEckey: PCSYMCRYPT_ECKEY,
        pbPrivateKey: PBYTE,
        cbPrivateKey: SIZE_T,
        pbPublicKey: PBYTE,
        cbPublicKey: SIZE_T,
        numFormat: SYMCRYPT_NUMBER_FORMAT,
        ecPointFormat: SYMCRYPT_ECPOINT_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Encrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        flags: UINT32,
        nfDst: SYMCRYPT_NUMBER_FORMAT,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Decrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        nfSrc: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaOaepEncrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        hashAlgorithm: PCSYMCRYPT_HASH,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        flags: UINT32,
        nfDst: SYMCRYPT_NUMBER_FORMAT,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaOaepDecrypt(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbSrc: PCBYTE,
        cbSrc: SIZE_T,
        nfSrc: SYMCRYPT_NUMBER_FORMAT,
        hashAlgorithm: PCSYMCRYPT_HASH,
        pbLabel: PCBYTE,
        cbLabel: SIZE_T,
        flags: UINT32,
        pbDst: PBYTE,
        cbDst: SIZE_T,
        pcbDst: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Sign(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pHashOIDs: PCSYMCRYPT_OID,
        nOIDCount: SIZE_T,
        flags: UINT32,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
        pcbSignature: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPkcs1Verify(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pHashOID: PCSYMCRYPT_OID,
        nOIDCount: SIZE_T,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPssSign(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        hashAlgorithm: PCSYMCRYPT_HASH,
        cbSalt: SIZE_T,
        flags: UINT32,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
        pcbSignature: *mut SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptRsaPssVerify(
        pkRsakey: PCSYMCRYPT_RSAKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        nfSignature: SYMCRYPT_NUMBER_FORMAT,
        hashAlgorithm: PCSYMCRYPT_HASH,
        cbSalt: SIZE_T,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDsaSign(
        pKey: PCSYMCRYPT_ECKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbSignature: PBYTE,
        cbSignature: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDsaVerify(
        pKey: PCSYMCRYPT_ECKEY,
        pbHashValue: PCBYTE,
        cbHashValue: SIZE_T,
        pbSignature: PCBYTE,
        cbSignature: SIZE_T,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
    ) -> SYMCRYPT_ERROR;
}
unsafe extern "C" {
    pub fn SymCryptEcDhSecretAgreement(
        pkPrivate: PCSYMCRYPT_ECKEY,
        pkPublic: PCSYMCRYPT_ECKEY,
        format: SYMCRYPT_NUMBER_FORMAT,
        flags: UINT32,
        pbAgreedSecret: PBYTE,
        cbAgreedSecret: SIZE_T,
    ) -> SYMCRYPT_ERROR;
}
